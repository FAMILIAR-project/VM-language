/*
* generated by Xtext
*/
package fr.inria.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlocksVmBlockParserRuleCall_0 = (RuleCall)cBlocksAssignment.eContents().get(0);
		
		/// *
		// * @name Variability Modeling (VM) language grammar
		// * @version: 2.1 (models created with previous versions are incompatible)
		// * @description: This version replaces the version VM2.0 located in https://github.com/ViViD-DiverSE/VM-Source which was used in the MOTIV project that finished in November, 2014. 
		// * @author: Mauricio Alferez (mauricioalferez.com), based on Mathieu Acher (mathieuacher.com) VM1.0
		// * @email: alferez.mauricio@gmail.com
		// * @organization: DiverSE group at INRIA, Rennes, France (http://diverse.irisa.fr)
		// * @date: 18/07/2013 - First commit
		// * / Model:
		//	blocks+=VmBlock*;
		public ParserRule getRule() { return rule; }

		//blocks+=VmBlock*
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }

		//VmBlock
		public RuleCall getBlocksVmBlockParserRuleCall_0() { return cBlocksVmBlockParserRuleCall_0; }
	}

	public class VmBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VmBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMetaDataDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRelationshipsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttributesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDescriptionsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstraintsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cObjectivesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cConfigurationsParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//VmBlock:
		//	PackageDeclaration | ImportDeclaration | MetaDataDeclaration | Relationships | Attributes | Descriptions | Constraints
		//	| Objectives | Configurations;
		public ParserRule getRule() { return rule; }

		//PackageDeclaration | ImportDeclaration | MetaDataDeclaration | Relationships | Attributes | Descriptions | Constraints |
		//Objectives | Configurations
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }

		//ImportDeclaration
		public RuleCall getImportDeclarationParserRuleCall_1() { return cImportDeclarationParserRuleCall_1; }

		//MetaDataDeclaration
		public RuleCall getMetaDataDeclarationParserRuleCall_2() { return cMetaDataDeclarationParserRuleCall_2; }

		//Relationships
		public RuleCall getRelationshipsParserRuleCall_3() { return cRelationshipsParserRuleCall_3; }

		//Attributes
		public RuleCall getAttributesParserRuleCall_4() { return cAttributesParserRuleCall_4; }

		//Descriptions
		public RuleCall getDescriptionsParserRuleCall_5() { return cDescriptionsParserRuleCall_5; }

		//Constraints
		public RuleCall getConstraintsParserRuleCall_6() { return cConstraintsParserRuleCall_6; }

		//Objectives
		public RuleCall getObjectivesParserRuleCall_7() { return cObjectivesParserRuleCall_7; }

		//Configurations
		public RuleCall getConfigurationsParserRuleCall_8() { return cConfigurationsParserRuleCall_8; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlocksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlocksVmBlockParserRuleCall_3_0 = (RuleCall)cBlocksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName "{" blocks+=VmBlock* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" blocks+=VmBlock* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//blocks+=VmBlock*
		public Assignment getBlocksAssignment_3() { return cBlocksAssignment_3; }

		//VmBlock
		public RuleCall getBlocksVmBlockParserRuleCall_3_0() { return cBlocksVmBlockParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportDeclaration:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class MetaDataDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetaDataDeclaration");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cVersionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVersionVersionParserRuleCall_1_1_0 = (RuleCall)cVersionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cAuthorKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAuthorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAuthorSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cAuthorAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cEmailKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEmailAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEmailEmailParserRuleCall_4_1_0 = (RuleCall)cEmailAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cOrganizationKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOrganizationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOrganizationSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cOrganizationAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cPublicationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPublicationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPublicationSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cPublicationAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cUnorderedGroup.eContents().get(7);
		private final Keyword cDateKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDateAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDateSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cDateAssignment_7_1.eContents().get(0);
		
		//MetaDataDeclaration:
		//	"@name" name=STRING & ("@version" version=Version)? & ("@description" description=STRING)? & ("@author"
		//	author=STRING)? & ("@email" email=Email)? & ("@organization" organization=STRING)? & ("@publication"
		//	publication=STRING)? & ("@date" date=STRING)?;
		public ParserRule getRule() { return rule; }

		//"@name" name=STRING & ("@version" version=Version)? & ("@description" description=STRING)? & ("@author" author=STRING)?
		//& ("@email" email=Email)? & ("@organization" organization=STRING)? & ("@publication" publication=STRING)? & ("@date"
		//date=STRING)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"@name" name=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"@name"
		public Keyword getNameKeyword_0_0() { return cNameKeyword_0_0; }

		//name=STRING
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_1_0() { return cNameSTRINGTerminalRuleCall_0_1_0; }

		//("@version" version=Version)?
		public Group getGroup_1() { return cGroup_1; }

		//"@version"
		public Keyword getVersionKeyword_1_0() { return cVersionKeyword_1_0; }

		//version=Version
		public Assignment getVersionAssignment_1_1() { return cVersionAssignment_1_1; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_1_1_0() { return cVersionVersionParserRuleCall_1_1_0; }

		//("@description" description=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"@description"
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }

		//("@author" author=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"@author"
		public Keyword getAuthorKeyword_3_0() { return cAuthorKeyword_3_0; }

		//author=STRING
		public Assignment getAuthorAssignment_3_1() { return cAuthorAssignment_3_1; }

		//STRING
		public RuleCall getAuthorSTRINGTerminalRuleCall_3_1_0() { return cAuthorSTRINGTerminalRuleCall_3_1_0; }

		//("@email" email=Email)?
		public Group getGroup_4() { return cGroup_4; }

		//"@email"
		public Keyword getEmailKeyword_4_0() { return cEmailKeyword_4_0; }

		//email=Email
		public Assignment getEmailAssignment_4_1() { return cEmailAssignment_4_1; }

		//Email
		public RuleCall getEmailEmailParserRuleCall_4_1_0() { return cEmailEmailParserRuleCall_4_1_0; }

		//("@organization" organization=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"@organization"
		public Keyword getOrganizationKeyword_5_0() { return cOrganizationKeyword_5_0; }

		//organization=STRING
		public Assignment getOrganizationAssignment_5_1() { return cOrganizationAssignment_5_1; }

		//STRING
		public RuleCall getOrganizationSTRINGTerminalRuleCall_5_1_0() { return cOrganizationSTRINGTerminalRuleCall_5_1_0; }

		//("@publication" publication=STRING)?
		public Group getGroup_6() { return cGroup_6; }

		//"@publication"
		public Keyword getPublicationKeyword_6_0() { return cPublicationKeyword_6_0; }

		//publication=STRING
		public Assignment getPublicationAssignment_6_1() { return cPublicationAssignment_6_1; }

		//STRING
		public RuleCall getPublicationSTRINGTerminalRuleCall_6_1_0() { return cPublicationSTRINGTerminalRuleCall_6_1_0; }

		//("@date" date=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"@date"
		public Keyword getDateKeyword_7_0() { return cDateKeyword_7_0; }

		//date=STRING
		public Assignment getDateAssignment_7_1() { return cDateAssignment_7_1; }

		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_7_1_0() { return cDateSTRINGTerminalRuleCall_7_1_0; }
	}

	public class EmailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Email");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUsernameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUsernameQualifiedNameParserRuleCall_0_0 = (RuleCall)cUsernameAssignment_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainQualifiedNameParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		
		//Email:
		//	username=QualifiedName "@" domain=QualifiedName;
		public ParserRule getRule() { return rule; }

		//username=QualifiedName "@" domain=QualifiedName
		public Group getGroup() { return cGroup; }

		//username=QualifiedName
		public Assignment getUsernameAssignment_0() { return cUsernameAssignment_0; }

		//QualifiedName
		public RuleCall getUsernameQualifiedNameParserRuleCall_0_0() { return cUsernameQualifiedNameParserRuleCall_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//domain=QualifiedName
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//QualifiedName
		public RuleCall getDomainQualifiedNameParserRuleCall_2_0() { return cDomainQualifiedNameParserRuleCall_2_0; }
	}

	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMainINTTerminalRuleCall_0_0 = (RuleCall)cMainAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTailAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTailINTTerminalRuleCall_1_1_0 = (RuleCall)cTailAssignment_1_1.eContents().get(0);
		
		//Version:
		//	main=INT ("." tail+=INT)*;
		public ParserRule getRule() { return rule; }

		//main=INT ("." tail+=INT)*
		public Group getGroup() { return cGroup; }

		//main=INT
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }

		//INT
		public RuleCall getMainINTTerminalRuleCall_0_0() { return cMainINTTerminalRuleCall_0_0; }

		//("." tail+=INT)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//tail+=INT
		public Assignment getTailAssignment_1_1() { return cTailAssignment_1_1; }

		//INT
		public RuleCall getTailINTTerminalRuleCall_1_1_0() { return cTailINTTerminalRuleCall_1_1_0; }
	}

	public class RelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationships");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootFeatureHierarchyParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		
		/// **
		// * 1. RELATIONSHIPS CHAPTER
		// * / Relationships:
		//	"Relationships:" root=FeatureHierarchy;
		public ParserRule getRule() { return rule; }

		//"Relationships:" root=FeatureHierarchy
		public Group getGroup() { return cGroup; }

		//"Relationships:"
		public Keyword getRelationshipsKeyword_0() { return cRelationshipsKeyword_0; }

		//root=FeatureHierarchy
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }

		//FeatureHierarchy
		public RuleCall getRootFeatureHierarchyParserRuleCall_1_0() { return cRootFeatureHierarchyParserRuleCall_1_0; }
	}

	public class FeatureHierarchyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureHierarchy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParentFeatureParserRuleCall_0_0 = (RuleCall)cParentAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChildrenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChildrenFeatureDefinitionParserRuleCall_2_0 = (RuleCall)cChildrenAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FeatureHierarchy:
		//	parent=Feature "{" children+=FeatureDefinition+ "}";
		public ParserRule getRule() { return rule; }

		//parent=Feature "{" children+=FeatureDefinition+ "}"
		public Group getGroup() { return cGroup; }

		//parent=Feature
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }

		//Feature
		public RuleCall getParentFeatureParserRuleCall_0_0() { return cParentFeatureParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//children+=FeatureDefinition+
		public Assignment getChildrenAssignment_2() { return cChildrenAssignment_2; }

		//FeatureDefinition
		public RuleCall getChildrenFeatureDefinitionParserRuleCall_2_0() { return cChildrenFeatureDefinitionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeaturesGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureHierarchyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FeatureDefinition:
		//	Feature | FeaturesGroup | FeatureHierarchy;
		public ParserRule getRule() { return rule; }

		//Feature | FeaturesGroup | FeatureHierarchy
		public Alternatives getAlternatives() { return cAlternatives; }

		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }

		//FeaturesGroup
		public RuleCall getFeaturesGroupParserRuleCall_1() { return cFeaturesGroupParserRuleCall_1; }

		//FeatureHierarchy
		public RuleCall getFeatureHierarchyParserRuleCall_2() { return cFeatureHierarchyParserRuleCall_2; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNotTranslatableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cNotTranslatableAlternatives_0_0_0 = (Alternatives)cNotTranslatableAssignment_0_0.eContents().get(0);
		private final Keyword cNotTranslatableNTKeyword_0_0_0_0 = (Keyword)cNotTranslatableAlternatives_0_0_0.eContents().get(0);
		private final Keyword cNotTranslatableNotTranslatableKeyword_0_0_0_1 = (Keyword)cNotTranslatableAlternatives_0_0_0.eContents().get(1);
		private final Assignment cRunTimeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cRunTimeAlternatives_0_1_0 = (Alternatives)cRunTimeAssignment_0_1.eContents().get(0);
		private final Keyword cRunTimeRTKeyword_0_1_0_0 = (Keyword)cRunTimeAlternatives_0_1_0.eContents().get(0);
		private final Keyword cRunTimeRunTimeKeyword_0_1_0_1 = (Keyword)cRunTimeAlternatives_0_1_0.eContents().get(1);
		private final Assignment cNotDecidableAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cNotDecidableAlternatives_0_2_0 = (Alternatives)cNotDecidableAssignment_0_2.eContents().get(0);
		private final Keyword cNotDecidableNDKeyword_0_2_0_0 = (Keyword)cNotDecidableAlternatives_0_2_0.eContents().get(0);
		private final Keyword cNotDecidableNotDecideableKeyword_0_2_0_1 = (Keyword)cNotDecidableAlternatives_0_2_0.eContents().get(1);
		private final Assignment cOptionalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOptionalQuestionMarkKeyword_1_0 = (Keyword)cOptionalAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCloneBetweenKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cMinAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMinIntegerParserRuleCall_2_0_1_0 = (RuleCall)cMinAssignment_2_0_1.eContents().get(0);
		private final Keyword cAndKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cMaxAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cMaxIntegerParserRuleCall_2_0_3_0 = (RuleCall)cMaxAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMinAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMinIntegerParserRuleCall_2_1_1_0 = (RuleCall)cMinAssignment_2_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cMaxAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cMaxIntegerParserRuleCall_2_1_3_0 = (RuleCall)cMaxAssignment_2_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Feature:
		//	(notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" |
		//	"@NotDecideable")?) optional?="?"? ("cloneBetween" min=Integer "and" max=Integer | "[" min=Integer ".." max=Integer
		//	"]")? name=ID;
		public ParserRule getRule() { return rule; }

		//(notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" |
		//"@NotDecideable")?) optional?="?"? ("cloneBetween" min=Integer "and" max=Integer | "[" min=Integer ".." max=Integer
		//"]")? name=ID
		public Group getGroup() { return cGroup; }

		//notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" | "@NotDecideable")?
		public Group getGroup_0() { return cGroup_0; }

		//notTranslatable?=("@NT" | "@NotTranslatable")?
		public Assignment getNotTranslatableAssignment_0_0() { return cNotTranslatableAssignment_0_0; }

		//"@NT" | "@NotTranslatable"
		public Alternatives getNotTranslatableAlternatives_0_0_0() { return cNotTranslatableAlternatives_0_0_0; }

		//"@NT"
		public Keyword getNotTranslatableNTKeyword_0_0_0_0() { return cNotTranslatableNTKeyword_0_0_0_0; }

		//"@NotTranslatable"
		public Keyword getNotTranslatableNotTranslatableKeyword_0_0_0_1() { return cNotTranslatableNotTranslatableKeyword_0_0_0_1; }

		//runTime?=("@RT" | "@RunTime")?
		public Assignment getRunTimeAssignment_0_1() { return cRunTimeAssignment_0_1; }

		//"@RT" | "@RunTime"
		public Alternatives getRunTimeAlternatives_0_1_0() { return cRunTimeAlternatives_0_1_0; }

		//"@RT"
		public Keyword getRunTimeRTKeyword_0_1_0_0() { return cRunTimeRTKeyword_0_1_0_0; }

		//"@RunTime"
		public Keyword getRunTimeRunTimeKeyword_0_1_0_1() { return cRunTimeRunTimeKeyword_0_1_0_1; }

		//notDecidable?=("@ND" | "@NotDecideable")?
		public Assignment getNotDecidableAssignment_0_2() { return cNotDecidableAssignment_0_2; }

		//"@ND" | "@NotDecideable"
		public Alternatives getNotDecidableAlternatives_0_2_0() { return cNotDecidableAlternatives_0_2_0; }

		//"@ND"
		public Keyword getNotDecidableNDKeyword_0_2_0_0() { return cNotDecidableNDKeyword_0_2_0_0; }

		//"@NotDecideable"
		public Keyword getNotDecidableNotDecideableKeyword_0_2_0_1() { return cNotDecidableNotDecideableKeyword_0_2_0_1; }

		//optional?="?"?
		public Assignment getOptionalAssignment_1() { return cOptionalAssignment_1; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_1_0() { return cOptionalQuestionMarkKeyword_1_0; }

		//("cloneBetween" min=Integer "and" max=Integer | "[" min=Integer ".." max=Integer "]")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"cloneBetween" min=Integer "and" max=Integer
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"cloneBetween"
		public Keyword getCloneBetweenKeyword_2_0_0() { return cCloneBetweenKeyword_2_0_0; }

		//min=Integer
		public Assignment getMinAssignment_2_0_1() { return cMinAssignment_2_0_1; }

		//Integer
		public RuleCall getMinIntegerParserRuleCall_2_0_1_0() { return cMinIntegerParserRuleCall_2_0_1_0; }

		//"and"
		public Keyword getAndKeyword_2_0_2() { return cAndKeyword_2_0_2; }

		//max=Integer
		public Assignment getMaxAssignment_2_0_3() { return cMaxAssignment_2_0_3; }

		//Integer
		public RuleCall getMaxIntegerParserRuleCall_2_0_3_0() { return cMaxIntegerParserRuleCall_2_0_3_0; }

		//"[" min=Integer ".." max=Integer "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//min=Integer
		public Assignment getMinAssignment_2_1_1() { return cMinAssignment_2_1_1; }

		//Integer
		public RuleCall getMinIntegerParserRuleCall_2_1_1_0() { return cMinIntegerParserRuleCall_2_1_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1_2() { return cFullStopFullStopKeyword_2_1_2; }

		//max=Integer
		public Assignment getMaxAssignment_2_1_3() { return cMaxAssignment_2_1_3; }

		//Integer
		public RuleCall getMaxIntegerParserRuleCall_2_1_3_0() { return cMaxIntegerParserRuleCall_2_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_4() { return cRightSquareBracketKeyword_2_1_4; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}

	public class FeaturesGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeaturesGroup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXorgroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrgroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCardinalityBasedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////| Mutexgroup
		//FeaturesGroup:
		//	Xorgroup | Orgroup | CardinalityBased;
		public ParserRule getRule() { return rule; }

		//Xorgroup | Orgroup | CardinalityBased
		public Alternatives getAlternatives() { return cAlternatives; }

		//Xorgroup
		public RuleCall getXorgroupParserRuleCall_0() { return cXorgroupParserRuleCall_0; }

		//Orgroup
		public RuleCall getOrgroupParserRuleCall_1() { return cOrgroupParserRuleCall_1; }

		//CardinalityBased
		public RuleCall getCardinalityBasedParserRuleCall_2() { return cCardinalityBasedParserRuleCall_2; }
	}

	public class XorgroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xorgroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupedFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cGroupedFeaturesAlternatives_2_0 = (Alternatives)cGroupedFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureParserRuleCall_2_0_0 = (RuleCall)cGroupedFeaturesAlternatives_2_0.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1 = (RuleCall)cGroupedFeaturesAlternatives_2_0.eContents().get(1);
		private final Assignment cGroupedFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cGroupedFeaturesAlternatives_3_0 = (Alternatives)cGroupedFeaturesAssignment_3.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureParserRuleCall_3_0_0 = (RuleCall)cGroupedFeaturesAlternatives_3_0.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1 = (RuleCall)cGroupedFeaturesAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Xorgroup:
		//	"oneOf" "{" groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}";
		public ParserRule getRule() { return rule; }

		//"oneOf" "{" groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}"
		public Group getGroup() { return cGroup; }

		//"oneOf"
		public Keyword getOneOfKeyword_0() { return cOneOfKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//groupedFeatures+=(Feature | FeatureHierarchy)
		public Assignment getGroupedFeaturesAssignment_2() { return cGroupedFeaturesAssignment_2; }

		//Feature | FeatureHierarchy
		public Alternatives getGroupedFeaturesAlternatives_2_0() { return cGroupedFeaturesAlternatives_2_0; }

		//Feature
		public RuleCall getGroupedFeaturesFeatureParserRuleCall_2_0_0() { return cGroupedFeaturesFeatureParserRuleCall_2_0_0; }

		//FeatureHierarchy
		public RuleCall getGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1() { return cGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1; }

		//groupedFeatures+=(Feature | FeatureHierarchy)+
		public Assignment getGroupedFeaturesAssignment_3() { return cGroupedFeaturesAssignment_3; }

		//Feature | FeatureHierarchy
		public Alternatives getGroupedFeaturesAlternatives_3_0() { return cGroupedFeaturesAlternatives_3_0; }

		//Feature
		public RuleCall getGroupedFeaturesFeatureParserRuleCall_3_0_0() { return cGroupedFeaturesFeatureParserRuleCall_3_0_0; }

		//FeatureHierarchy
		public RuleCall getGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1() { return cGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OrgroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Orgroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSomeOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupedFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cGroupedFeaturesAlternatives_2_0 = (Alternatives)cGroupedFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureParserRuleCall_2_0_0 = (RuleCall)cGroupedFeaturesAlternatives_2_0.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1 = (RuleCall)cGroupedFeaturesAlternatives_2_0.eContents().get(1);
		private final Assignment cGroupedFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cGroupedFeaturesAlternatives_3_0 = (Alternatives)cGroupedFeaturesAssignment_3.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureParserRuleCall_3_0_0 = (RuleCall)cGroupedFeaturesAlternatives_3_0.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1 = (RuleCall)cGroupedFeaturesAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Orgroup:
		//	"someOf" "{" groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}";
		public ParserRule getRule() { return rule; }

		//"someOf" "{" groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}"
		public Group getGroup() { return cGroup; }

		//"someOf"
		public Keyword getSomeOfKeyword_0() { return cSomeOfKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//groupedFeatures+=(Feature | FeatureHierarchy)
		public Assignment getGroupedFeaturesAssignment_2() { return cGroupedFeaturesAssignment_2; }

		//Feature | FeatureHierarchy
		public Alternatives getGroupedFeaturesAlternatives_2_0() { return cGroupedFeaturesAlternatives_2_0; }

		//Feature
		public RuleCall getGroupedFeaturesFeatureParserRuleCall_2_0_0() { return cGroupedFeaturesFeatureParserRuleCall_2_0_0; }

		//FeatureHierarchy
		public RuleCall getGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1() { return cGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1; }

		//groupedFeatures+=(Feature | FeatureHierarchy)+
		public Assignment getGroupedFeaturesAssignment_3() { return cGroupedFeaturesAssignment_3; }

		//Feature | FeatureHierarchy
		public Alternatives getGroupedFeaturesAlternatives_3_0() { return cGroupedFeaturesAlternatives_3_0; }

		//Feature
		public RuleCall getGroupedFeaturesFeatureParserRuleCall_3_0_0() { return cGroupedFeaturesFeatureParserRuleCall_3_0_0; }

		//FeatureHierarchy
		public RuleCall getGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1() { return cGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CardinalityBasedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CardinalityBased");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cSomeBetweenKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cMinAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cMinIntegerParserRuleCall_0_0_1_0 = (RuleCall)cMinAssignment_0_0_1.eContents().get(0);
		private final Keyword cAndKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cMaxAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cMaxIntegerParserRuleCall_0_0_3_0 = (RuleCall)cMaxAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cMinAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cMinIntegerParserRuleCall_0_1_1_0 = (RuleCall)cMinAssignment_0_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Alternatives cAlternatives_0_1_3 = (Alternatives)cGroup_0_1.eContents().get(3);
		private final Assignment cMaxAssignment_0_1_3_0 = (Assignment)cAlternatives_0_1_3.eContents().get(0);
		private final RuleCall cMaxIntegerParserRuleCall_0_1_3_0_0 = (RuleCall)cMaxAssignment_0_1_3_0.eContents().get(0);
		private final Assignment cAllAssignment_0_1_3_1 = (Assignment)cAlternatives_0_1_3.eContents().get(1);
		private final Keyword cAllAsteriskKeyword_0_1_3_1_0 = (Keyword)cAllAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGroupedFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cGroupedFeaturesAlternatives_2_0 = (Alternatives)cGroupedFeaturesAssignment_2.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureParserRuleCall_2_0_0 = (RuleCall)cGroupedFeaturesAlternatives_2_0.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1 = (RuleCall)cGroupedFeaturesAlternatives_2_0.eContents().get(1);
		private final Assignment cGroupedFeaturesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cGroupedFeaturesAlternatives_3_0 = (Alternatives)cGroupedFeaturesAssignment_3.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureParserRuleCall_3_0_0 = (RuleCall)cGroupedFeaturesAlternatives_3_0.eContents().get(0);
		private final RuleCall cGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1 = (RuleCall)cGroupedFeaturesAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CardinalityBased:
		//	("someBetween" min=Integer "and" max=Integer | "[" min=Integer ".." (max=Integer | all?="*") "]") "{"
		//	groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}";
		public ParserRule getRule() { return rule; }

		//("someBetween" min=Integer "and" max=Integer | "[" min=Integer ".." (max=Integer | all?="*") "]") "{"
		//groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}"
		public Group getGroup() { return cGroup; }

		//"someBetween" min=Integer "and" max=Integer | "[" min=Integer ".." (max=Integer | all?="*") "]"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"someBetween" min=Integer "and" max=Integer
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"someBetween"
		public Keyword getSomeBetweenKeyword_0_0_0() { return cSomeBetweenKeyword_0_0_0; }

		//min=Integer
		public Assignment getMinAssignment_0_0_1() { return cMinAssignment_0_0_1; }

		//Integer
		public RuleCall getMinIntegerParserRuleCall_0_0_1_0() { return cMinIntegerParserRuleCall_0_0_1_0; }

		//"and"
		public Keyword getAndKeyword_0_0_2() { return cAndKeyword_0_0_2; }

		//max=Integer
		public Assignment getMaxAssignment_0_0_3() { return cMaxAssignment_0_0_3; }

		//Integer
		public RuleCall getMaxIntegerParserRuleCall_0_0_3_0() { return cMaxIntegerParserRuleCall_0_0_3_0; }

		//"[" min=Integer ".." (max=Integer | all?="*") "]"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }

		//min=Integer
		public Assignment getMinAssignment_0_1_1() { return cMinAssignment_0_1_1; }

		//Integer
		public RuleCall getMinIntegerParserRuleCall_0_1_1_0() { return cMinIntegerParserRuleCall_0_1_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_0_1_2() { return cFullStopFullStopKeyword_0_1_2; }

		//max=Integer | all?="*"
		public Alternatives getAlternatives_0_1_3() { return cAlternatives_0_1_3; }

		//max=Integer
		public Assignment getMaxAssignment_0_1_3_0() { return cMaxAssignment_0_1_3_0; }

		//Integer
		public RuleCall getMaxIntegerParserRuleCall_0_1_3_0_0() { return cMaxIntegerParserRuleCall_0_1_3_0_0; }

		//all?="*"
		public Assignment getAllAssignment_0_1_3_1() { return cAllAssignment_0_1_3_1; }

		//"*"
		public Keyword getAllAsteriskKeyword_0_1_3_1_0() { return cAllAsteriskKeyword_0_1_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_4() { return cRightSquareBracketKeyword_0_1_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//groupedFeatures+=(Feature | FeatureHierarchy)
		public Assignment getGroupedFeaturesAssignment_2() { return cGroupedFeaturesAssignment_2; }

		//Feature | FeatureHierarchy
		public Alternatives getGroupedFeaturesAlternatives_2_0() { return cGroupedFeaturesAlternatives_2_0; }

		//Feature
		public RuleCall getGroupedFeaturesFeatureParserRuleCall_2_0_0() { return cGroupedFeaturesFeatureParserRuleCall_2_0_0; }

		//FeatureHierarchy
		public RuleCall getGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1() { return cGroupedFeaturesFeatureHierarchyParserRuleCall_2_0_1; }

		//groupedFeatures+=(Feature | FeatureHierarchy)+
		public Assignment getGroupedFeaturesAssignment_3() { return cGroupedFeaturesAssignment_3; }

		//Feature | FeatureHierarchy
		public Alternatives getGroupedFeaturesAlternatives_3_0() { return cGroupedFeaturesAlternatives_3_0; }

		//Feature
		public RuleCall getGroupedFeaturesFeatureParserRuleCall_3_0_0() { return cGroupedFeaturesFeatureParserRuleCall_3_0_0; }

		//FeatureHierarchy
		public RuleCall getGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1() { return cGroupedFeaturesFeatureHierarchyParserRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAttrDefsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cAttrDefsAttrDefParserRuleCall_1_0_0 = (RuleCall)cAttrDefsAssignment_1_0.eContents().get(0);
		private final Assignment cAttrValuationsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAttrValuationsBasicAttrValuationParserRuleCall_1_1_0 = (RuleCall)cAttrValuationsAssignment_1_1.eContents().get(0);
		
		/// **
		// * 2. ATTRIBUTES CHAPTER
		// * / Attributes:
		//	"Attributes:" (attrDefs+=AttrDef | attrValuations+=BasicAttrValuation)+;
		public ParserRule getRule() { return rule; }

		//"Attributes:" (attrDefs+=AttrDef | attrValuations+=BasicAttrValuation)+
		public Group getGroup() { return cGroup; }

		//"Attributes:"
		public Keyword getAttributesKeyword_0() { return cAttributesKeyword_0; }

		//(attrDefs+=AttrDef | attrValuations+=BasicAttrValuation)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//attrDefs+=AttrDef
		public Assignment getAttrDefsAssignment_1_0() { return cAttrDefsAssignment_1_0; }

		//AttrDef
		public RuleCall getAttrDefsAttrDefParserRuleCall_1_0_0() { return cAttrDefsAttrDefParserRuleCall_1_0_0; }

		//attrValuations+=BasicAttrValuation
		public Assignment getAttrValuationsAssignment_1_1() { return cAttrValuationsAssignment_1_1; }

		//BasicAttrValuation
		public RuleCall getAttrValuationsBasicAttrValuationParserRuleCall_1_1_0() { return cAttrValuationsBasicAttrValuationParserRuleCall_1_1_0; }
	}

	public class AttrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNotTranslatableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cNotTranslatableAlternatives_0_0_0 = (Alternatives)cNotTranslatableAssignment_0_0.eContents().get(0);
		private final Keyword cNotTranslatableNTKeyword_0_0_0_0 = (Keyword)cNotTranslatableAlternatives_0_0_0.eContents().get(0);
		private final Keyword cNotTranslatableNotTranslatableKeyword_0_0_0_1 = (Keyword)cNotTranslatableAlternatives_0_0_0.eContents().get(1);
		private final Assignment cRunTimeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cRunTimeAlternatives_0_1_0 = (Alternatives)cRunTimeAssignment_0_1.eContents().get(0);
		private final Keyword cRunTimeRTKeyword_0_1_0_0 = (Keyword)cRunTimeAlternatives_0_1_0.eContents().get(0);
		private final Keyword cRunTimeRunTimeKeyword_0_1_0_1 = (Keyword)cRunTimeAlternatives_0_1_0.eContents().get(1);
		private final Assignment cNotDecidableAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Alternatives cNotDecidableAlternatives_0_2_0 = (Alternatives)cNotDecidableAssignment_0_2.eContents().get(0);
		private final Keyword cNotDecidableNDKeyword_0_2_0_0 = (Keyword)cNotDecidableAlternatives_0_2_0.eContents().get(0);
		private final Keyword cNotDecidableNotDecideableKeyword_0_2_0_1 = (Keyword)cNotDecidableAlternatives_0_2_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBasicAttrDefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBasicAttrDefBasicAttrDefParserRuleCall_1_0_0 = (RuleCall)cBasicAttrDefAssignment_1_0.eContents().get(0);
		private final Assignment cEnumAttrDefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cEnumAttrDefEnumAttrDefParserRuleCall_1_1_0 = (RuleCall)cEnumAttrDefAssignment_1_1.eContents().get(0);
		
		/// *
		//		 * mao 23/07/2013: The purpose of dividing basic attributes is to ease type checking
		//		 * 
		//		 * / AttrDef:
		//	(notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" |
		//	"@NotDecideable")?) (basicAttrDef=BasicAttrDef | enumAttrDef=EnumAttrDef);
		public ParserRule getRule() { return rule; }

		//(notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" |
		//"@NotDecideable")?) (basicAttrDef=BasicAttrDef | enumAttrDef=EnumAttrDef)
		public Group getGroup() { return cGroup; }

		//notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" | "@NotDecideable")?
		public Group getGroup_0() { return cGroup_0; }

		//notTranslatable?=("@NT" | "@NotTranslatable")?
		public Assignment getNotTranslatableAssignment_0_0() { return cNotTranslatableAssignment_0_0; }

		//"@NT" | "@NotTranslatable"
		public Alternatives getNotTranslatableAlternatives_0_0_0() { return cNotTranslatableAlternatives_0_0_0; }

		//"@NT"
		public Keyword getNotTranslatableNTKeyword_0_0_0_0() { return cNotTranslatableNTKeyword_0_0_0_0; }

		//"@NotTranslatable"
		public Keyword getNotTranslatableNotTranslatableKeyword_0_0_0_1() { return cNotTranslatableNotTranslatableKeyword_0_0_0_1; }

		//runTime?=("@RT" | "@RunTime")?
		public Assignment getRunTimeAssignment_0_1() { return cRunTimeAssignment_0_1; }

		//"@RT" | "@RunTime"
		public Alternatives getRunTimeAlternatives_0_1_0() { return cRunTimeAlternatives_0_1_0; }

		//"@RT"
		public Keyword getRunTimeRTKeyword_0_1_0_0() { return cRunTimeRTKeyword_0_1_0_0; }

		//"@RunTime"
		public Keyword getRunTimeRunTimeKeyword_0_1_0_1() { return cRunTimeRunTimeKeyword_0_1_0_1; }

		//notDecidable?=("@ND" | "@NotDecideable")?
		public Assignment getNotDecidableAssignment_0_2() { return cNotDecidableAssignment_0_2; }

		//"@ND" | "@NotDecideable"
		public Alternatives getNotDecidableAlternatives_0_2_0() { return cNotDecidableAlternatives_0_2_0; }

		//"@ND"
		public Keyword getNotDecidableNDKeyword_0_2_0_0() { return cNotDecidableNDKeyword_0_2_0_0; }

		//"@NotDecideable"
		public Keyword getNotDecidableNotDecideableKeyword_0_2_0_1() { return cNotDecidableNotDecideableKeyword_0_2_0_1; }

		//basicAttrDef=BasicAttrDef | enumAttrDef=EnumAttrDef
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//basicAttrDef=BasicAttrDef
		public Assignment getBasicAttrDefAssignment_1_0() { return cBasicAttrDefAssignment_1_0; }

		//BasicAttrDef
		public RuleCall getBasicAttrDefBasicAttrDefParserRuleCall_1_0_0() { return cBasicAttrDefBasicAttrDefParserRuleCall_1_0_0; }

		//enumAttrDef=EnumAttrDef
		public Assignment getEnumAttrDefAssignment_1_1() { return cEnumAttrDefAssignment_1_1; }

		//EnumAttrDef
		public RuleCall getEnumAttrDefEnumAttrDefParserRuleCall_1_1_0() { return cEnumAttrDefEnumAttrDefParserRuleCall_1_1_0; }
	}

	public class BasicAttrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicAttrDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanAttrDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringAttrDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerAttrDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealAttrDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BasicAttrDef:
		//	BooleanAttrDef | StringAttrDef | IntegerAttrDef | RealAttrDef;
		public ParserRule getRule() { return rule; }

		//BooleanAttrDef | StringAttrDef | IntegerAttrDef | RealAttrDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanAttrDef
		public RuleCall getBooleanAttrDefParserRuleCall_0() { return cBooleanAttrDefParserRuleCall_0; }

		//StringAttrDef
		public RuleCall getStringAttrDefParserRuleCall_1() { return cStringAttrDefParserRuleCall_1; }

		//IntegerAttrDef
		public RuleCall getIntegerAttrDefParserRuleCall_2() { return cIntegerAttrDefParserRuleCall_2; }

		//RealAttrDef
		public RuleCall getRealAttrDefParserRuleCall_3() { return cRealAttrDefParserRuleCall_3; }
	}

	public class BooleanAttrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAttrDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameBoolean_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Assignment cDefaultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultBoolDefaultDefParserRuleCall_3_0 = (RuleCall)cDefaultAssignment_3.eContents().get(0);
		
		//BooleanAttrDef:
		//	"boolean" name=Boolean_ATT_ID ("=" value=("true" | "false"))? default=BoolDefaultDef?;
		public ParserRule getRule() { return rule; }

		//"boolean" name=Boolean_ATT_ID ("=" value=("true" | "false"))? default=BoolDefaultDef?
		public Group getGroup() { return cGroup; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//name=Boolean_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Boolean_ATT_ID
		public RuleCall getNameBoolean_ATT_IDParserRuleCall_1_0() { return cNameBoolean_ATT_IDParserRuleCall_1_0; }

		//("=" value=("true" | "false"))?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }

		//default=BoolDefaultDef?
		public Assignment getDefaultAssignment_3() { return cDefaultAssignment_3; }

		//BoolDefaultDef
		public RuleCall getDefaultBoolDefaultDefParserRuleCall_3_0() { return cDefaultBoolDefaultDefParserRuleCall_3_0; }
	}

	public class StringAttrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringAttrDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameString_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Assignment cDefaultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultStringDefaultDefParserRuleCall_3_0 = (RuleCall)cDefaultAssignment_3.eContents().get(0);
		
		//StringAttrDef:
		//	"string" name=String_ATT_ID ("=" value=STRING)? default=StringDefaultDef?;
		public ParserRule getRule() { return rule; }

		//"string" name=String_ATT_ID ("=" value=STRING)? default=StringDefaultDef?
		public Group getGroup() { return cGroup; }

		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//name=String_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//String_ATT_ID
		public RuleCall getNameString_ATT_IDParserRuleCall_1_0() { return cNameString_ATT_IDParserRuleCall_1_0; }

		//("=" value=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//default=StringDefaultDef?
		public Assignment getDefaultAssignment_3() { return cDefaultAssignment_3; }

		//StringDefaultDef
		public RuleCall getDefaultStringDefaultDefParserRuleCall_3_0() { return cDefaultStringDefaultDefParserRuleCall_3_0; }
	}

	public class IntegerAttrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAttrDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerAttrDefBoundedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerAttrDefUnboundedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntegerAttrDef:
		//	IntegerAttrDefBounded | IntegerAttrDefUnbounded;
		public ParserRule getRule() { return rule; }

		//IntegerAttrDefBounded | IntegerAttrDefUnbounded
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerAttrDefBounded
		public RuleCall getIntegerAttrDefBoundedParserRuleCall_0() { return cIntegerAttrDefBoundedParserRuleCall_0; }

		//IntegerAttrDefUnbounded
		public RuleCall getIntegerAttrDefUnboundedParserRuleCall_1() { return cIntegerAttrDefUnboundedParserRuleCall_1; }
	}

	public class IntegerAttrDefBoundedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAttrDefBounded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInteger_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComplementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cComplementsIntegerAttrDefComplementParserRuleCall_2_0_0 = (RuleCall)cComplementsAssignment_2_0.eContents().get(0);
		private final Assignment cComplementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComplementIntegerAttrDefComplementParserRuleCall_2_1_0 = (RuleCall)cComplementAssignment_2_1.eContents().get(0);
		private final Assignment cDefaultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultIntegerDefaultDefParserRuleCall_3_0 = (RuleCall)cDefaultAssignment_3.eContents().get(0);
		
		//IntegerAttrDefBounded:
		//	"int" name=Integer_ATT_ID (complements+=IntegerAttrDefComplement complement+=IntegerAttrDefComplement*)
		//	default=IntegerDefaultDef?;
		public ParserRule getRule() { return rule; }

		//"int" name=Integer_ATT_ID (complements+=IntegerAttrDefComplement complement+=IntegerAttrDefComplement*)
		//default=IntegerDefaultDef?
		public Group getGroup() { return cGroup; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//name=Integer_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Integer_ATT_ID
		public RuleCall getNameInteger_ATT_IDParserRuleCall_1_0() { return cNameInteger_ATT_IDParserRuleCall_1_0; }

		//complements+=IntegerAttrDefComplement complement+=IntegerAttrDefComplement*
		public Group getGroup_2() { return cGroup_2; }

		//complements+=IntegerAttrDefComplement
		public Assignment getComplementsAssignment_2_0() { return cComplementsAssignment_2_0; }

		//IntegerAttrDefComplement
		public RuleCall getComplementsIntegerAttrDefComplementParserRuleCall_2_0_0() { return cComplementsIntegerAttrDefComplementParserRuleCall_2_0_0; }

		//complement+=IntegerAttrDefComplement*
		public Assignment getComplementAssignment_2_1() { return cComplementAssignment_2_1; }

		//IntegerAttrDefComplement
		public RuleCall getComplementIntegerAttrDefComplementParserRuleCall_2_1_0() { return cComplementIntegerAttrDefComplementParserRuleCall_2_1_0; }

		//default=IntegerDefaultDef?
		public Assignment getDefaultAssignment_3() { return cDefaultAssignment_3; }

		//IntegerDefaultDef
		public RuleCall getDefaultIntegerDefaultDefParserRuleCall_3_0() { return cDefaultIntegerDefaultDefParserRuleCall_3_0; }
	}

	public class IntegerAttrDefComplementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAttrDefComplement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinIntegerParserRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxIntegerParserRuleCall_3_0 = (RuleCall)cMaxAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeltaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeltaIntegerDeltaDefParserRuleCall_5_0 = (RuleCall)cDeltaAssignment_5.eContents().get(0);
		
		//IntegerAttrDefComplement:
		//	"[" min=Integer ".." max=Integer "]" delta=IntegerDeltaDef?;
		public ParserRule getRule() { return rule; }

		//"[" min=Integer ".." max=Integer "]" delta=IntegerDeltaDef?
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//min=Integer
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }

		//Integer
		public RuleCall getMinIntegerParserRuleCall_1_0() { return cMinIntegerParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//max=Integer
		public Assignment getMaxAssignment_3() { return cMaxAssignment_3; }

		//Integer
		public RuleCall getMaxIntegerParserRuleCall_3_0() { return cMaxIntegerParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//delta=IntegerDeltaDef?
		public Assignment getDeltaAssignment_5() { return cDeltaAssignment_5; }

		//IntegerDeltaDef
		public RuleCall getDeltaIntegerDeltaDefParserRuleCall_5_0() { return cDeltaIntegerDeltaDefParserRuleCall_5_0; }
	}

	public class IntegerAttrDefUnboundedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAttrDefUnbounded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameInteger_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValueIntegerParserRuleCall_2_0_1_0 = (RuleCall)cValueAssignment_2_0_1.eContents().get(0);
		private final Assignment cDefaultAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDefaultIntegerDefaultDefParserRuleCall_2_1_0 = (RuleCall)cDefaultAssignment_2_1.eContents().get(0);
		
		////mao 5/2/2014, delta MUST NOT be considered in an unbounded attribute definition.
		//IntegerAttrDefUnbounded:
		//	"int" name=Integer_ATT_ID ("=" value=Integer | default=IntegerDefaultDef)?;
		public ParserRule getRule() { return rule; }

		//"int" name=Integer_ATT_ID ("=" value=Integer | default=IntegerDefaultDef)?
		public Group getGroup() { return cGroup; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//name=Integer_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Integer_ATT_ID
		public RuleCall getNameInteger_ATT_IDParserRuleCall_1_0() { return cNameInteger_ATT_IDParserRuleCall_1_0; }

		//("=" value=Integer | default=IntegerDefaultDef)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"=" value=Integer
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//value=Integer
		public Assignment getValueAssignment_2_0_1() { return cValueAssignment_2_0_1; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_2_0_1_0() { return cValueIntegerParserRuleCall_2_0_1_0; }

		//default=IntegerDefaultDef
		public Assignment getDefaultAssignment_2_1() { return cDefaultAssignment_2_1; }

		//IntegerDefaultDef
		public RuleCall getDefaultIntegerDefaultDefParserRuleCall_2_1_0() { return cDefaultIntegerDefaultDefParserRuleCall_2_1_0; }
	}

	public class RealAttrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealAttrDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealAttrDefBoundedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealAttrDefUnboundedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RealAttrDef:
		//	RealAttrDefBounded | RealAttrDefUnbounded;
		public ParserRule getRule() { return rule; }

		//RealAttrDefBounded | RealAttrDefUnbounded
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealAttrDefBounded
		public RuleCall getRealAttrDefBoundedParserRuleCall_0() { return cRealAttrDefBoundedParserRuleCall_0; }

		//RealAttrDefUnbounded
		public RuleCall getRealAttrDefUnboundedParserRuleCall_1() { return cRealAttrDefUnboundedParserRuleCall_1; }
	}

	public class RealAttrDefBoundedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealAttrDefBounded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameReal_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComplementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cComplementRealAttrDefComplementParserRuleCall_2_0_0 = (RuleCall)cComplementAssignment_2_0.eContents().get(0);
		private final Assignment cComplementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComplementRealAttrDefComplementParserRuleCall_2_1_0 = (RuleCall)cComplementAssignment_2_1.eContents().get(0);
		private final Assignment cDefaultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultRealDefaultDefParserRuleCall_3_0 = (RuleCall)cDefaultAssignment_3.eContents().get(0);
		
		//RealAttrDefBounded:
		//	"real" name=Real_ATT_ID (complement+=RealAttrDefComplement complement+=RealAttrDefComplement*)
		//	default=RealDefaultDef?;
		public ParserRule getRule() { return rule; }

		//"real" name=Real_ATT_ID (complement+=RealAttrDefComplement complement+=RealAttrDefComplement*) default=RealDefaultDef?
		public Group getGroup() { return cGroup; }

		//"real"
		public Keyword getRealKeyword_0() { return cRealKeyword_0; }

		//name=Real_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Real_ATT_ID
		public RuleCall getNameReal_ATT_IDParserRuleCall_1_0() { return cNameReal_ATT_IDParserRuleCall_1_0; }

		//complement+=RealAttrDefComplement complement+=RealAttrDefComplement*
		public Group getGroup_2() { return cGroup_2; }

		//complement+=RealAttrDefComplement
		public Assignment getComplementAssignment_2_0() { return cComplementAssignment_2_0; }

		//RealAttrDefComplement
		public RuleCall getComplementRealAttrDefComplementParserRuleCall_2_0_0() { return cComplementRealAttrDefComplementParserRuleCall_2_0_0; }

		//complement+=RealAttrDefComplement*
		public Assignment getComplementAssignment_2_1() { return cComplementAssignment_2_1; }

		//RealAttrDefComplement
		public RuleCall getComplementRealAttrDefComplementParserRuleCall_2_1_0() { return cComplementRealAttrDefComplementParserRuleCall_2_1_0; }

		//default=RealDefaultDef?
		public Assignment getDefaultAssignment_3() { return cDefaultAssignment_3; }

		//RealDefaultDef
		public RuleCall getDefaultRealDefaultDefParserRuleCall_3_0() { return cDefaultRealDefaultDefParserRuleCall_3_0; }
	}

	public class RealAttrDefComplementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealAttrDefComplement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinRealParserRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxRealParserRuleCall_3_0 = (RuleCall)cMaxAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeltaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeltaRealDeltaDefParserRuleCall_5_0 = (RuleCall)cDeltaAssignment_5.eContents().get(0);
		
		//RealAttrDefComplement:
		//	"[" min=Real ".." max=Real "]" delta=RealDeltaDef?;
		public ParserRule getRule() { return rule; }

		//"[" min=Real ".." max=Real "]" delta=RealDeltaDef?
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//min=Real
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }

		//Real
		public RuleCall getMinRealParserRuleCall_1_0() { return cMinRealParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//max=Real
		public Assignment getMaxAssignment_3() { return cMaxAssignment_3; }

		//Real
		public RuleCall getMaxRealParserRuleCall_3_0() { return cMaxRealParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//delta=RealDeltaDef?
		public Assignment getDeltaAssignment_5() { return cDeltaAssignment_5; }

		//RealDeltaDef
		public RuleCall getDeltaRealDeltaDefParserRuleCall_5_0() { return cDeltaRealDeltaDefParserRuleCall_5_0; }
	}

	public class RealAttrDefUnboundedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealAttrDefUnbounded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameReal_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cValueRealParserRuleCall_2_0_1_0 = (RuleCall)cValueAssignment_2_0_1.eContents().get(0);
		private final Assignment cDefaultAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDefaultRealDefaultDefParserRuleCall_2_1_0 = (RuleCall)cDefaultAssignment_2_1.eContents().get(0);
		
		////mao 5/2/2014, delta MUST NOT be considered in an unbounded attribute definition.
		//RealAttrDefUnbounded:
		//	"real" name=Real_ATT_ID ("=" value=Real | default=RealDefaultDef)?;
		public ParserRule getRule() { return rule; }

		//"real" name=Real_ATT_ID ("=" value=Real | default=RealDefaultDef)?
		public Group getGroup() { return cGroup; }

		//"real"
		public Keyword getRealKeyword_0() { return cRealKeyword_0; }

		//name=Real_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Real_ATT_ID
		public RuleCall getNameReal_ATT_IDParserRuleCall_1_0() { return cNameReal_ATT_IDParserRuleCall_1_0; }

		//("=" value=Real | default=RealDefaultDef)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"=" value=Real
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//value=Real
		public Assignment getValueAssignment_2_0_1() { return cValueAssignment_2_0_1; }

		//Real
		public RuleCall getValueRealParserRuleCall_2_0_1_0() { return cValueRealParserRuleCall_2_0_1_0; }

		//default=RealDefaultDef
		public Assignment getDefaultAssignment_2_1() { return cDefaultAssignment_2_1; }

		//RealDefaultDef
		public RuleCall getDefaultRealDefaultDefParserRuleCall_2_1_0() { return cDefaultRealDefaultDefParserRuleCall_2_1_0; }
	}

	public class EnumAttrDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumAttrDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumIntegerDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumStringDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumRealDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *
		//		 * mao 23/07/2013: The purpose of dividing enumerations is to type check that all the enumerated values are identified and treated as members of the same domain
		//		 * 
		//		 * / EnumAttrDef:
		//	EnumIntegerDef | EnumStringDef | EnumRealDef;
		public ParserRule getRule() { return rule; }

		//EnumIntegerDef | EnumStringDef | EnumRealDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumIntegerDef
		public RuleCall getEnumIntegerDefParserRuleCall_0() { return cEnumIntegerDefParserRuleCall_0; }

		//EnumStringDef
		public RuleCall getEnumStringDefParserRuleCall_1() { return cEnumStringDefParserRuleCall_1; }

		//EnumRealDef
		public RuleCall getEnumRealDefParserRuleCall_2() { return cEnumRealDefParserRuleCall_2; }
	}

	public class EnumStringDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumStringDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEnum_String_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultStringDefaultDefParserRuleCall_6_0 = (RuleCall)cDefaultAssignment_6.eContents().get(0);
		
		//EnumStringDef:
		//	"enum" name=Enum_String_ATT_ID "[" value+=STRING ("," value+=STRING)+ "]" default=StringDefaultDef?;
		public ParserRule getRule() { return rule; }

		//"enum" name=Enum_String_ATT_ID "[" value+=STRING ("," value+=STRING)+ "]" default=StringDefaultDef?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Enum_String_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Enum_String_ATT_ID
		public RuleCall getNameEnum_String_ATT_IDParserRuleCall_1_0() { return cNameEnum_String_ATT_IDParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//value+=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }

		//("," value+=STRING)+
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//value+=STRING
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_0() { return cValueSTRINGTerminalRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//default=StringDefaultDef?
		public Assignment getDefaultAssignment_6() { return cDefaultAssignment_6; }

		//StringDefaultDef
		public RuleCall getDefaultStringDefaultDefParserRuleCall_6_0() { return cDefaultStringDefaultDefParserRuleCall_6_0; }
	}

	public class EnumIntegerDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumIntegerDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEnum_Integer_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIntegerParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueIntegerParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultIntegerDefaultDefParserRuleCall_6_0 = (RuleCall)cDefaultAssignment_6.eContents().get(0);
		
		//EnumIntegerDef:
		//	"enum" name=Enum_Integer_ATT_ID "[" value+=Integer ("," value+=Integer)+ "]" default=IntegerDefaultDef?;
		public ParserRule getRule() { return rule; }

		//"enum" name=Enum_Integer_ATT_ID "[" value+=Integer ("," value+=Integer)+ "]" default=IntegerDefaultDef?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Enum_Integer_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Enum_Integer_ATT_ID
		public RuleCall getNameEnum_Integer_ATT_IDParserRuleCall_1_0() { return cNameEnum_Integer_ATT_IDParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//value+=Integer
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_3_0() { return cValueIntegerParserRuleCall_3_0; }

		//("," value+=Integer)+
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//value+=Integer
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_4_1_0() { return cValueIntegerParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//default=IntegerDefaultDef?
		public Assignment getDefaultAssignment_6() { return cDefaultAssignment_6; }

		//IntegerDefaultDef
		public RuleCall getDefaultIntegerDefaultDefParserRuleCall_6_0() { return cDefaultIntegerDefaultDefParserRuleCall_6_0; }
	}

	public class EnumRealDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumRealDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEnum_Real_ATT_IDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueRealParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueRealParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultRealDefaultDefParserRuleCall_6_0 = (RuleCall)cDefaultAssignment_6.eContents().get(0);
		
		//EnumRealDef:
		//	"enum" name=Enum_Real_ATT_ID "[" value+=Real ("," value+=Real)+ "]" default=RealDefaultDef?;
		public ParserRule getRule() { return rule; }

		//"enum" name=Enum_Real_ATT_ID "[" value+=Real ("," value+=Real)+ "]" default=RealDefaultDef?
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=Enum_Real_ATT_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Enum_Real_ATT_ID
		public RuleCall getNameEnum_Real_ATT_IDParserRuleCall_1_0() { return cNameEnum_Real_ATT_IDParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//value+=Real
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Real
		public RuleCall getValueRealParserRuleCall_3_0() { return cValueRealParserRuleCall_3_0; }

		//("," value+=Real)+
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//value+=Real
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//Real
		public RuleCall getValueRealParserRuleCall_4_1_0() { return cValueRealParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//default=RealDefaultDef?
		public Assignment getDefaultAssignment_6() { return cDefaultAssignment_6; }

		//RealDefaultDef
		public RuleCall getDefaultRealDefaultDefParserRuleCall_6_0() { return cDefaultRealDefaultDefParserRuleCall_6_0; }
	}

	public class BoolDefaultDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolDefaultDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//BoolDefaultDef:
		//	"default" value=("true" | "false");
		public ParserRule getRule() { return rule; }

		//"default" value=("true" | "false")
		public Group getGroup() { return cGroup; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_1_0_1() { return cValueFalseKeyword_1_0_1; }
	}

	public class StringDefaultDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringDefaultDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringDefaultDef:
		//	"default" value=STRING;
		public ParserRule getRule() { return rule; }

		//"default" value=STRING
		public Group getGroup() { return cGroup; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class IntegerDeltaDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerDeltaDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeltaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerDeltaDef:
		//	"delta" value=INT;
		public ParserRule getRule() { return rule; }

		//"delta" value=INT
		public Group getGroup() { return cGroup; }

		//"delta"
		public Keyword getDeltaKeyword_0() { return cDeltaKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class IntegerDefaultDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerDefaultDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerDefaultDef:
		//	"default" value=INT;
		public ParserRule getRule() { return rule; }

		//"default" value=INT
		public Group getGroup() { return cGroup; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class RealDeltaDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealDeltaDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeltaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRealParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RealDeltaDef:
		//	"delta" value=Real;
		public ParserRule getRule() { return rule; }

		//"delta" value=Real
		public Group getGroup() { return cGroup; }

		//"delta"
		public Keyword getDeltaKeyword_0() { return cDeltaKeyword_0; }

		//value=Real
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Real
		public RuleCall getValueRealParserRuleCall_1_0() { return cValueRealParserRuleCall_1_0; }
	}

	public class RealDefaultDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealDefaultDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRealParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RealDefaultDef:
		//	"default" value=Real;
		public ParserRule getRule() { return rule; }

		//"default" value=Real
		public Group getGroup() { return cGroup; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//value=Real
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Real
		public RuleCall getValueRealParserRuleCall_1_0() { return cValueRealParserRuleCall_1_0; }
	}

	public class DescriptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Descriptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFeaturesDescriptionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFeaturesDescriptionsFeatureDescriptionParserRuleCall_1_0_0 = (RuleCall)cFeaturesDescriptionsAssignment_1_0.eContents().get(0);
		private final Assignment cAttributesDescriptionsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cAttributesDescriptionsAttributeDescriptionParserRuleCall_1_1_0 = (RuleCall)cAttributesDescriptionsAssignment_1_1.eContents().get(0);
		
		/// *
		// * 3. DESCRIPTIONS CHAPTER
		// * / Descriptions:
		//	"Descriptions:" (featuresDescriptions+=FeatureDescription | attributesDescriptions+=AttributeDescription)+;
		public ParserRule getRule() { return rule; }

		//"Descriptions:" (featuresDescriptions+=FeatureDescription | attributesDescriptions+=AttributeDescription)+
		public Group getGroup() { return cGroup; }

		//"Descriptions:"
		public Keyword getDescriptionsKeyword_0() { return cDescriptionsKeyword_0; }

		//(featuresDescriptions+=FeatureDescription | attributesDescriptions+=AttributeDescription)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//featuresDescriptions+=FeatureDescription
		public Assignment getFeaturesDescriptionsAssignment_1_0() { return cFeaturesDescriptionsAssignment_1_0; }

		//FeatureDescription
		public RuleCall getFeaturesDescriptionsFeatureDescriptionParserRuleCall_1_0_0() { return cFeaturesDescriptionsFeatureDescriptionParserRuleCall_1_0_0; }

		//attributesDescriptions+=AttributeDescription
		public Assignment getAttributesDescriptionsAssignment_1_1() { return cAttributesDescriptionsAssignment_1_1; }

		//AttributeDescription
		public RuleCall getAttributesDescriptionsAttributeDescriptionParserRuleCall_1_1_0() { return cAttributesDescriptionsAttributeDescriptionParserRuleCall_1_1_0; }
	}

	public class FeatureDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefFeatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefFeatFeatureCrossReference_1_0 = (CrossReference)cRefFeatAssignment_1.eContents().get(0);
		private final RuleCall cRefFeatFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cRefFeatFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//FeatureDescription: //'feat' refFeat=[Feature|QualifiedName] "is" description=STRING; //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference a feature using the syntax of a qualified name (i.e., packageA.subpackageB.featureC)
		//	"feat" refFeat=[Feature] "is" description=STRING;
		public ParserRule getRule() { return rule; }

		////'feat' refFeat=[Feature|QualifiedName] "is" description=STRING; //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference a feature using the syntax of a qualified name (i.e., packageA.subpackageB.featureC)
		//"feat" refFeat=[Feature] "is" description=STRING
		public Group getGroup() { return cGroup; }

		////'feat' refFeat=[Feature|QualifiedName] "is" description=STRING; //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference a feature using the syntax of a qualified name (i.e., packageA.subpackageB.featureC)
		//"feat"
		public Keyword getFeatKeyword_0() { return cFeatKeyword_0; }

		//refFeat=[Feature]
		public Assignment getRefFeatAssignment_1() { return cRefFeatAssignment_1; }

		//[Feature]
		public CrossReference getRefFeatFeatureCrossReference_1_0() { return cRefFeatFeatureCrossReference_1_0; }

		//ID
		public RuleCall getRefFeatFeatureIDTerminalRuleCall_1_0_1() { return cRefFeatFeatureIDTerminalRuleCall_1_0_1; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }
	}

	public class AttributeDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAsteriskFullStopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cRefFeatAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cRefFeatFeatureCrossReference_1_1_0_0 = (CrossReference)cRefFeatAssignment_1_1_0.eContents().get(0);
		private final RuleCall cRefFeatFeatureIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cRefFeatFeatureCrossReference_1_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRefAttAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefAttAbstract_ATT_IDCrossReference_2_0 = (CrossReference)cRefAttAssignment_2.eContents().get(0);
		private final RuleCall cRefAttAbstract_ATT_IDIDTerminalRuleCall_2_0_1 = (RuleCall)cRefAttAbstract_ATT_IDCrossReference_2_0.eContents().get(1);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//AttributeDescription: //'att' ('*.' | refAtt=[Abstract_ATT_ID|QualifiedName]) "is" description=STRING;  //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference an attribute using the syntax of a qualified name (i.e., packageA.subpackageB.featureC.attributeD)
		//	"att" ("*." | refFeat=[Feature] ".")? refAtt=[Abstract_ATT_ID] "is" description=STRING;
		public ParserRule getRule() { return rule; }

		////'att' ('*.' | refAtt=[Abstract_ATT_ID|QualifiedName]) "is" description=STRING;  //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference an attribute using the syntax of a qualified name (i.e., packageA.subpackageB.featureC.attributeD)
		//"att" ("*." | refFeat=[Feature] ".")? refAtt=[Abstract_ATT_ID] "is" description=STRING
		public Group getGroup() { return cGroup; }

		////'att' ('*.' | refAtt=[Abstract_ATT_ID|QualifiedName]) "is" description=STRING;  //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference an attribute using the syntax of a qualified name (i.e., packageA.subpackageB.featureC.attributeD)
		//"att"
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }

		//("*." | refFeat=[Feature] ".")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"*."
		public Keyword getAsteriskFullStopKeyword_1_0() { return cAsteriskFullStopKeyword_1_0; }

		//refFeat=[Feature] "."
		public Group getGroup_1_1() { return cGroup_1_1; }

		//refFeat=[Feature]
		public Assignment getRefFeatAssignment_1_1_0() { return cRefFeatAssignment_1_1_0; }

		//[Feature]
		public CrossReference getRefFeatFeatureCrossReference_1_1_0_0() { return cRefFeatFeatureCrossReference_1_1_0_0; }

		//ID
		public RuleCall getRefFeatFeatureIDTerminalRuleCall_1_1_0_0_1() { return cRefFeatFeatureIDTerminalRuleCall_1_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//refAtt=[Abstract_ATT_ID]
		public Assignment getRefAttAssignment_2() { return cRefAttAssignment_2; }

		//[Abstract_ATT_ID]
		public CrossReference getRefAttAbstract_ATT_IDCrossReference_2_0() { return cRefAttAbstract_ATT_IDCrossReference_2_0; }

		//ID
		public RuleCall getRefAttAbstract_ATT_IDIDTerminalRuleCall_2_0_1() { return cRefAttAbstract_ATT_IDIDTerminalRuleCall_2_0_1; }

		//"is"
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
	}

	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstraintsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_1_0 = (RuleCall)cConstraintsAssignment_1.eContents().get(0);
		
		/// *
		// * 4. CONSTRAINTS CHAPTER
		// * 
		// * / Constraints:
		//	"Constraints:" constraints+=Constraint+;
		public ParserRule getRule() { return rule; }

		//"Constraints:" constraints+=Constraint+
		public Group getGroup() { return cGroup; }

		//"Constraints:"
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }

		//constraints+=Constraint+
		public Assignment getConstraintsAssignment_1() { return cConstraintsAssignment_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_1_0() { return cConstraintsConstraintParserRuleCall_1_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSubExpression0ParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Constraint:
		//	("constraint" name=ID "=")? expression=SubExpression0;
		public ParserRule getRule() { return rule; }

		//("constraint" name=ID "=")? expression=SubExpression0
		public Group getGroup() { return cGroup; }

		//("constraint" name=ID "=")?
		public Group getGroup_0() { return cGroup_0; }

		//"constraint"
		public Keyword getConstraintKeyword_0_0() { return cConstraintKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//expression=SubExpression0
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SubExpression0
		public RuleCall getExpressionSubExpression0ParserRuleCall_1_0() { return cExpressionSubExpression0ParserRuleCall_1_0; }
	}

	public class SubExpression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cIfLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSubExpression0ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Keyword cColonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cRightSubExpression1ParserRuleCall_1_0_4_0 = (RuleCall)cRightAssignment_1_0_4.eContents().get(0);
		
		////if then else
		//SubExpression0 returns ComplexExpression:
		//	SubExpression1 => ({If.left=current} "?" right+=SubExpression0 ":" right+=SubExpression1)*;
		public ParserRule getRule() { return rule; }

		//SubExpression1 => ({If.left=current} "?" right+=SubExpression0 ":" right+=SubExpression1)*
		public Group getGroup() { return cGroup; }

		//SubExpression1
		public RuleCall getSubExpression1ParserRuleCall_0() { return cSubExpression1ParserRuleCall_0; }

		//=> ({If.left=current} "?" right+=SubExpression0 ":" right+=SubExpression1)*
		public Group getGroup_1() { return cGroup_1; }

		//{If.left=current} "?" right+=SubExpression0 ":" right+=SubExpression1
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{If.left=current}
		public Action getIfLeftAction_1_0_0() { return cIfLeftAction_1_0_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_1() { return cQuestionMarkKeyword_1_0_1; }

		//right+=SubExpression0
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//SubExpression0
		public RuleCall getRightSubExpression0ParserRuleCall_1_0_2_0() { return cRightSubExpression0ParserRuleCall_1_0_2_0; }

		//":"
		public Keyword getColonKeyword_1_0_3() { return cColonKeyword_1_0_3; }

		//right+=SubExpression1
		public Assignment getRightAssignment_1_0_4() { return cRightAssignment_1_0_4; }

		//SubExpression1
		public RuleCall getRightSubExpression1ParserRuleCall_1_0_4_0() { return cRightSubExpression1ParserRuleCall_1_0_4_0; }
	}

	public class SubExpression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cLeftImplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSubExpression2ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		////a implies b
		//SubExpression1 returns ComplexExpression:
		//	SubExpression2 => ({LeftImplication.left=current} "<-" right=SubExpression2)*;
		public ParserRule getRule() { return rule; }

		//SubExpression2 => ({LeftImplication.left=current} "<-" right=SubExpression2)*
		public Group getGroup() { return cGroup; }

		//SubExpression2
		public RuleCall getSubExpression2ParserRuleCall_0() { return cSubExpression2ParserRuleCall_0; }

		//=> ({LeftImplication.left=current} "<-" right=SubExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//{LeftImplication.left=current} "<-" right=SubExpression2
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{LeftImplication.left=current}
		public Action getLeftImplicationLeftAction_1_0_0() { return cLeftImplicationLeftAction_1_0_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1_0_1() { return cLessThanSignHyphenMinusKeyword_1_0_1; }

		//right=SubExpression2
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//SubExpression2
		public RuleCall getRightSubExpression2ParserRuleCall_1_0_2_0() { return cRightSubExpression2ParserRuleCall_1_0_2_0; }
	}

	public class SubExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cRightImplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSubExpression3ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		////b implies a
		//SubExpression2 returns ComplexExpression:
		//	SubExpression3 => ({RightImplication.left=current} "->" right=SubExpression3)*;
		public ParserRule getRule() { return rule; }

		//SubExpression3 => ({RightImplication.left=current} "->" right=SubExpression3)*
		public Group getGroup() { return cGroup; }

		//SubExpression3
		public RuleCall getSubExpression3ParserRuleCall_0() { return cSubExpression3ParserRuleCall_0; }

		//=> ({RightImplication.left=current} "->" right=SubExpression3)*
		public Group getGroup_1() { return cGroup_1; }

		//{RightImplication.left=current} "->" right=SubExpression3
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{RightImplication.left=current}
		public Action getRightImplicationLeftAction_1_0_0() { return cRightImplicationLeftAction_1_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_1; }

		//right=SubExpression3
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//SubExpression3
		public RuleCall getRightSubExpression3ParserRuleCall_1_0_2_0() { return cRightSubExpression3ParserRuleCall_1_0_2_0; }
	}

	public class SubExpression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cBiImplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSubExpression4ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//// a iff b
		//SubExpression3 returns ComplexExpression:
		//	SubExpression4 => ({BiImplication.left=current} "<->" right=SubExpression4)*;
		public ParserRule getRule() { return rule; }

		//SubExpression4 => ({BiImplication.left=current} "<->" right=SubExpression4)*
		public Group getGroup() { return cGroup; }

		//SubExpression4
		public RuleCall getSubExpression4ParserRuleCall_0() { return cSubExpression4ParserRuleCall_0; }

		//=> ({BiImplication.left=current} "<->" right=SubExpression4)*
		public Group getGroup_1() { return cGroup_1; }

		//{BiImplication.left=current} "<->" right=SubExpression4
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BiImplication.left=current}
		public Action getBiImplicationLeftAction_1_0_0() { return cBiImplicationLeftAction_1_0_0; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1_0_1; }

		//right=SubExpression4
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//SubExpression4
		public RuleCall getRightSubExpression4ParserRuleCall_1_0_2_0() { return cRightSubExpression4ParserRuleCall_1_0_2_0; }
	}

	public class SubExpression4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSubExpression5ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		////or
		//SubExpression4 returns ComplexExpression:
		//	SubExpression5 => ({Or.left=current} "||" right=SubExpression5)*;
		public ParserRule getRule() { return rule; }

		//SubExpression5 => ({Or.left=current} "||" right=SubExpression5)*
		public Group getGroup() { return cGroup; }

		//SubExpression5
		public RuleCall getSubExpression5ParserRuleCall_0() { return cSubExpression5ParserRuleCall_0; }

		//=> ({Or.left=current} "||" right=SubExpression5)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current} "||" right=SubExpression5
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0_0() { return cOrLeftAction_1_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1() { return cVerticalLineVerticalLineKeyword_1_0_1; }

		//right=SubExpression5
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//SubExpression5
		public RuleCall getRightSubExpression5ParserRuleCall_1_0_2_0() { return cRightSubExpression5ParserRuleCall_1_0_2_0; }
	}

	public class SubExpression5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSubExpression6ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		////and
		//SubExpression5 returns ComplexExpression:
		//	SubExpression6 => ({And.left=current} "&&" right=SubExpression6)*;
		public ParserRule getRule() { return rule; }

		//SubExpression6 => ({And.left=current} "&&" right=SubExpression6)*
		public Group getGroup() { return cGroup; }

		//SubExpression6
		public RuleCall getSubExpression6ParserRuleCall_0() { return cSubExpression6ParserRuleCall_0; }

		//=> ({And.left=current} "&&" right=SubExpression6)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current} "&&" right=SubExpression6
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{And.left=current}
		public Action getAndLeftAction_1_0_0() { return cAndLeftAction_1_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_1() { return cAmpersandAmpersandKeyword_1_0_1; }

		//right=SubExpression6
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//SubExpression6
		public RuleCall getRightSubExpression6ParserRuleCall_1_0_2_0() { return cRightSubExpression6ParserRuleCall_1_0_2_0; }
	}

	public class SubExpression6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression7ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cEqualityLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cInequalityLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightSubExpression7ParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//// a == b, a !=b
		//SubExpression6 returns ComplexExpression:
		//	SubExpression7 => ((({Equality.left=current} "==" | {Inequality.left=current} "!=") right=SubExpression7)*)?;
		public ParserRule getRule() { return rule; }

		//SubExpression7 => ((({Equality.left=current} "==" | {Inequality.left=current} "!=") right=SubExpression7)*)?
		public Group getGroup() { return cGroup; }

		//SubExpression7
		public RuleCall getSubExpression7ParserRuleCall_0() { return cSubExpression7ParserRuleCall_0; }

		//=> ((({Equality.left=current} "==" | {Inequality.left=current} "!=") right=SubExpression7)*)?
		public Group getGroup_1() { return cGroup_1; }

		//(({Equality.left=current} "==" | {Inequality.left=current} "!=") right=SubExpression7)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Equality.left=current} "==" | {Inequality.left=current} "!="
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//{Equality.left=current} "=="
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0_0_0_0() { return cEqualityLeftAction_1_0_0_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_0_1; }

		//{Inequality.left=current} "!="
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//{Inequality.left=current}
		public Action getInequalityLeftAction_1_0_0_1_0() { return cInequalityLeftAction_1_0_0_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_0_1_1; }

		//right=SubExpression7
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }

		//SubExpression7
		public RuleCall getRightSubExpression7ParserRuleCall_1_0_1_0() { return cRightSubExpression7ParserRuleCall_1_0_1_0; }
	}

	public class SubExpression7Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression7");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression8ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cLessLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_0_2 = (Group)cGroup_1_0_0_0.eContents().get(2);
		private final Group cGroup_1_0_0_0_2_0 = (Group)cGroup_1_0_0_0_2.eContents().get(0);
		private final Action cLessequalLeftAction_1_0_0_0_2_0_0 = (Action)cGroup_1_0_0_0_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_0_2_0_1 = (Keyword)cGroup_1_0_0_0_2_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cGreaterLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Group cGroup_1_0_0_1_2 = (Group)cGroup_1_0_0_1.eContents().get(2);
		private final Group cGroup_1_0_0_1_2_0 = (Group)cGroup_1_0_0_1_2.eContents().get(0);
		private final Action cGreaterequalLeftAction_1_0_0_1_2_0_0 = (Action)cGroup_1_0_0_1_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1_2_0_1 = (Keyword)cGroup_1_0_0_1_2_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightSubExpression8ParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//SubExpression7 returns ComplexExpression:
		//	SubExpression8 => (({Less.left=current} "<" => ({Lessequal.left=current} "=")? | {Greater.left=current} ">" =>
		//	({Greaterequal.left=current} "=")?) right=SubExpression8)*;
		public ParserRule getRule() { return rule; }

		//SubExpression8 => (({Less.left=current} "<" => ({Lessequal.left=current} "=")? | {Greater.left=current} ">" =>
		//({Greaterequal.left=current} "=")?) right=SubExpression8)*
		public Group getGroup() { return cGroup; }

		//SubExpression8
		public RuleCall getSubExpression8ParserRuleCall_0() { return cSubExpression8ParserRuleCall_0; }

		//=> (({Less.left=current} "<" => ({Lessequal.left=current} "=")? | {Greater.left=current} ">" =>
		//({Greaterequal.left=current} "=")?) right=SubExpression8)*
		public Group getGroup_1() { return cGroup_1; }

		//({Less.left=current} "<" => ({Lessequal.left=current} "=")? | {Greater.left=current} ">" => ({Greaterequal.left=current}
		//"=")?) right=SubExpression8
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Less.left=current} "<" => ({Lessequal.left=current} "=")? | {Greater.left=current} ">" => ({Greaterequal.left=current}
		//"=")?
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//{Less.left=current} "<" => ({Lessequal.left=current} "=")?
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Less.left=current}
		public Action getLessLeftAction_1_0_0_0_0() { return cLessLeftAction_1_0_0_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_0_0_1() { return cLessThanSignKeyword_1_0_0_0_1; }

		//=> ({Lessequal.left=current} "=")?
		public Group getGroup_1_0_0_0_2() { return cGroup_1_0_0_0_2; }

		//{Lessequal.left=current} "="
		public Group getGroup_1_0_0_0_2_0() { return cGroup_1_0_0_0_2_0; }

		//{Lessequal.left=current}
		public Action getLessequalLeftAction_1_0_0_0_2_0_0() { return cLessequalLeftAction_1_0_0_0_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_0_0_2_0_1() { return cEqualsSignKeyword_1_0_0_0_2_0_1; }

		//{Greater.left=current} ">" => ({Greaterequal.left=current} "=")?
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_0_1_0() { return cGreaterLeftAction_1_0_0_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_0_1_1() { return cGreaterThanSignKeyword_1_0_0_1_1; }

		//=> ({Greaterequal.left=current} "=")?
		public Group getGroup_1_0_0_1_2() { return cGroup_1_0_0_1_2; }

		//{Greaterequal.left=current} "="
		public Group getGroup_1_0_0_1_2_0() { return cGroup_1_0_0_1_2_0; }

		//{Greaterequal.left=current}
		public Action getGreaterequalLeftAction_1_0_0_1_2_0_0() { return cGreaterequalLeftAction_1_0_0_1_2_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_0_1_2_0_1() { return cEqualsSignKeyword_1_0_0_1_2_0_1; }

		//right=SubExpression8
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }

		//SubExpression8
		public RuleCall getRightSubExpression8ParserRuleCall_1_0_1_0() { return cRightSubExpression8ParserRuleCall_1_0_1_0; }
	}

	public class SubExpression8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression8");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression9ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightSubExpression9ParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//SubExpression8 returns ComplexExpression:
		//	SubExpression9 => (({Plus.left=current} "+" | {Minus.left=current} "-") right=SubExpression9)*;
		public ParserRule getRule() { return rule; }

		//SubExpression9 => (({Plus.left=current} "+" | {Minus.left=current} "-") right=SubExpression9)*
		public Group getGroup() { return cGroup; }

		//SubExpression9
		public RuleCall getSubExpression9ParserRuleCall_0() { return cSubExpression9ParserRuleCall_0; }

		//=> (({Plus.left=current} "+" | {Minus.left=current} "-") right=SubExpression9)*
		public Group getGroup_1() { return cGroup_1; }

		//({Plus.left=current} "+" | {Minus.left=current} "-") right=SubExpression9
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0_0() { return cPlusLeftAction_1_0_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_0_1() { return cPlusSignKeyword_1_0_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_0_1_0() { return cMinusLeftAction_1_0_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_0_1_1() { return cHyphenMinusKeyword_1_0_0_1_1; }

		//right=SubExpression9
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }

		//SubExpression9
		public RuleCall getRightSubExpression9ParserRuleCall_1_0_1_0() { return cRightSubExpression9ParserRuleCall_1_0_1_0; }
	}

	public class SubExpression9Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression9");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpression10ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightSubExpression10ParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//SubExpression9 returns ComplexExpression:
		//	SubExpression10 => (({Multiplication.left=current} "*" | {Division.left=current} "/") right=SubExpression10)*;
		public ParserRule getRule() { return rule; }

		//SubExpression10 => (({Multiplication.left=current} "*" | {Division.left=current} "/") right=SubExpression10)*
		public Group getGroup() { return cGroup; }

		//SubExpression10
		public RuleCall getSubExpression10ParserRuleCall_0() { return cSubExpression10ParserRuleCall_0; }

		//=> (({Multiplication.left=current} "*" | {Division.left=current} "/") right=SubExpression10)*
		public Group getGroup_1() { return cGroup_1; }

		//({Multiplication.left=current} "*" | {Division.left=current} "/") right=SubExpression10
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Multiplication.left=current} "*" | {Division.left=current} "/"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//{Multiplication.left=current} "*"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0_0_0() { return cMultiplicationLeftAction_1_0_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_0_1() { return cAsteriskKeyword_1_0_0_0_1; }

		//{Division.left=current} "/"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_0_1_0() { return cDivisionLeftAction_1_0_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_0_1_1() { return cSolidusKeyword_1_0_0_1_1; }

		//right=SubExpression10
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }

		//SubExpression10
		public RuleCall getRightSubExpression10ParserRuleCall_1_0_1_0() { return cRightSubExpression10ParserRuleCall_1_0_1_0; }
	}

	public class SubExpression10Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubExpression10");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Action cExcludesLeftAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cExcludesKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Action cRequiresLeftAction_1_0_0_1_0 = (Action)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cRequiresKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_1_0_1_0 = (RuleCall)cRightAssignment_1_0_1.eContents().get(0);
		
		//SubExpression10 returns ComplexExpression:
		//	Expression => (({Excludes.left=current} "excludes" | {Requires.left=current} "requires") right=Expression)*;
		public ParserRule getRule() { return rule; }

		//Expression => (({Excludes.left=current} "excludes" | {Requires.left=current} "requires") right=Expression)*
		public Group getGroup() { return cGroup; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//=> (({Excludes.left=current} "excludes" | {Requires.left=current} "requires") right=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//({Excludes.left=current} "excludes" | {Requires.left=current} "requires") right=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Excludes.left=current} "excludes" | {Requires.left=current} "requires"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//{Excludes.left=current} "excludes"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{Excludes.left=current}
		public Action getExcludesLeftAction_1_0_0_0_0() { return cExcludesLeftAction_1_0_0_0_0; }

		//"excludes"
		public Keyword getExcludesKeyword_1_0_0_0_1() { return cExcludesKeyword_1_0_0_0_1; }

		//{Requires.left=current} "requires"
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//{Requires.left=current}
		public Action getRequiresLeftAction_1_0_0_1_0() { return cRequiresLeftAction_1_0_0_1_0; }

		//"requires"
		public Keyword getRequiresKeyword_1_0_0_1_1() { return cRequiresKeyword_1_0_0_1_1; }

		//right=Expression
		public Assignment getRightAssignment_1_0_1() { return cRightAssignment_1_0_1; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_0_1_0() { return cRightExpressionParserRuleCall_1_0_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBrackedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSpecialExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrimitiveExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	NumericExpression | BooleanExpression | BrackedExpression | StringExpression | SpecialExpression |
		//	PrimitiveExpression;
		public ParserRule getRule() { return rule; }

		//NumericExpression | BooleanExpression | BrackedExpression | StringExpression | SpecialExpression | PrimitiveExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericExpression
		public RuleCall getNumericExpressionParserRuleCall_0() { return cNumericExpressionParserRuleCall_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_1() { return cBooleanExpressionParserRuleCall_1; }

		//BrackedExpression
		public RuleCall getBrackedExpressionParserRuleCall_2() { return cBrackedExpressionParserRuleCall_2; }

		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_3() { return cStringExpressionParserRuleCall_3; }

		//SpecialExpression
		public RuleCall getSpecialExpressionParserRuleCall_4() { return cSpecialExpressionParserRuleCall_4; }

		//PrimitiveExpression
		public RuleCall getPrimitiveExpressionParserRuleCall_5() { return cPrimitiveExpressionParserRuleCall_5; }
	}

	public class SpecialExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecialExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpClonesOfKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExpressionFeatureCrossReference_1_0 = (CrossReference)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cExpressionFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cExpressionFeatureCrossReference_1_0.eContents().get(1);
		
		//SpecialExpression:
		//	op="clonesOf" expression=[Feature];
		public ParserRule getRule() { return rule; }

		//op="clonesOf" expression=[Feature]
		public Group getGroup() { return cGroup; }

		//op="clonesOf"
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"clonesOf"
		public Keyword getOpClonesOfKeyword_0_0() { return cOpClonesOfKeyword_0_0; }

		//expression=[Feature]
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//[Feature]
		public CrossReference getExpressionFeatureCrossReference_1_0() { return cExpressionFeatureCrossReference_1_0; }

		//ID
		public RuleCall getExpressionFeatureIDTerminalRuleCall_1_0_1() { return cExpressionFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringExpression:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class PrimitiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFeatureIDAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cFeatureIDFeatureCrossReference_0_0 = (CrossReference)cFeatureIDAssignment_0.eContents().get(0);
		private final RuleCall cFeatureIDFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cFeatureIDFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cHeadAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_1_0_0 = (RuleCall)cHeadAssignment_1_0.eContents().get(0);
		private final Assignment cRefAttAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefAttAbstract_ATT_IDCrossReference_1_1_0 = (CrossReference)cRefAttAssignment_1_1.eContents().get(0);
		private final RuleCall cRefAttAbstract_ATT_IDIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefAttAbstract_ATT_IDCrossReference_1_1_0.eContents().get(1);
		
		//PrimitiveExpression:
		//	featureID=[Feature] | head=AttHead refAtt=[Abstract_ATT_ID];
		public ParserRule getRule() { return rule; }

		//featureID=[Feature] | head=AttHead refAtt=[Abstract_ATT_ID]
		public Alternatives getAlternatives() { return cAlternatives; }

		//featureID=[Feature]
		public Assignment getFeatureIDAssignment_0() { return cFeatureIDAssignment_0; }

		//[Feature]
		public CrossReference getFeatureIDFeatureCrossReference_0_0() { return cFeatureIDFeatureCrossReference_0_0; }

		//ID
		public RuleCall getFeatureIDFeatureIDTerminalRuleCall_0_0_1() { return cFeatureIDFeatureIDTerminalRuleCall_0_0_1; }

		//head=AttHead refAtt=[Abstract_ATT_ID]
		public Group getGroup_1() { return cGroup_1; }

		//head=AttHead
		public Assignment getHeadAssignment_1_0() { return cHeadAssignment_1_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_1_0_0() { return cHeadAttHeadParserRuleCall_1_0_0; }

		//refAtt=[Abstract_ATT_ID]
		public Assignment getRefAttAssignment_1_1() { return cRefAttAssignment_1_1; }

		//[Abstract_ATT_ID]
		public CrossReference getRefAttAbstract_ATT_IDCrossReference_1_1_0() { return cRefAttAbstract_ATT_IDCrossReference_1_1_0; }

		//ID
		public RuleCall getRefAttAbstract_ATT_IDIDTerminalRuleCall_1_1_0_1() { return cRefAttAbstract_ATT_IDIDTerminalRuleCall_1_1_0_1; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionBooleanExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOpOrKeyword_3_0_0 = (Keyword)cOpAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpression_listAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpression_listBooleanExpression_ListParserRuleCall_3_2_0 = (RuleCall)cExpression_listAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cOpXorKeyword_4_0_0 = (Keyword)cOpAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpression_listAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpression_listBooleanExpression_ListParserRuleCall_4_2_0 = (RuleCall)cExpression_listAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOpAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cOpAndKeyword_5_0_0 = (Keyword)cOpAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpression_listAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpression_listBooleanExpression_ListParserRuleCall_5_2_0 = (RuleCall)cExpression_listAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//BooleanExpression:
		//	value="true" | value="false" | op="!" expression=BooleanExpression | op="or" "("
		//	expression_list=BooleanExpression_List ")" | op="xor" "(" expression_list=BooleanExpression_List ")" | op="and" "("
		//	expression_list=BooleanExpression_List ")";
		public ParserRule getRule() { return rule; }

		//value="true" | value="false" | op="!" expression=BooleanExpression | op="or" "(" expression_list=BooleanExpression_List
		//")" | op="xor" "(" expression_list=BooleanExpression_List ")" | op="and" "(" expression_list=BooleanExpression_List ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//value="false"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"false"
		public Keyword getValueFalseKeyword_1_0() { return cValueFalseKeyword_1_0; }

		//op="!" expression=BooleanExpression
		public Group getGroup_2() { return cGroup_2; }

		//op="!"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_2_0_0() { return cOpExclamationMarkKeyword_2_0_0; }

		//expression=BooleanExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//BooleanExpression
		public RuleCall getExpressionBooleanExpressionParserRuleCall_2_1_0() { return cExpressionBooleanExpressionParserRuleCall_2_1_0; }

		//op="or" "(" expression_list=BooleanExpression_List ")"
		public Group getGroup_3() { return cGroup_3; }

		//op="or"
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }

		//"or"
		public Keyword getOpOrKeyword_3_0_0() { return cOpOrKeyword_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//expression_list=BooleanExpression_List
		public Assignment getExpression_listAssignment_3_2() { return cExpression_listAssignment_3_2; }

		//BooleanExpression_List
		public RuleCall getExpression_listBooleanExpression_ListParserRuleCall_3_2_0() { return cExpression_listBooleanExpression_ListParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//op="xor" "(" expression_list=BooleanExpression_List ")"
		public Group getGroup_4() { return cGroup_4; }

		//op="xor"
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }

		//"xor"
		public Keyword getOpXorKeyword_4_0_0() { return cOpXorKeyword_4_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//expression_list=BooleanExpression_List
		public Assignment getExpression_listAssignment_4_2() { return cExpression_listAssignment_4_2; }

		//BooleanExpression_List
		public RuleCall getExpression_listBooleanExpression_ListParserRuleCall_4_2_0() { return cExpression_listBooleanExpression_ListParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//op="and" "(" expression_list=BooleanExpression_List ")"
		public Group getGroup_5() { return cGroup_5; }

		//op="and"
		public Assignment getOpAssignment_5_0() { return cOpAssignment_5_0; }

		//"and"
		public Keyword getOpAndKeyword_5_0_0() { return cOpAndKeyword_5_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//expression_list=BooleanExpression_List
		public Assignment getExpression_listAssignment_5_2() { return cExpression_listAssignment_5_2; }

		//BooleanExpression_List
		public RuleCall getExpression_listBooleanExpression_ListParserRuleCall_5_2_0() { return cExpression_listBooleanExpression_ListParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}

	public class BrackedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BrackedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSubExpression0ParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BrackedExpression:
		//	"(" expression=SubExpression0 ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=SubExpression0 ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=SubExpression0
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SubExpression0
		public RuleCall getExpressionSubExpression0ParserRuleCall_1_0() { return cExpressionSubExpression0ParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class NumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIntegerParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueRealParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpNegKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionNumericExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOpAbsKeyword_3_0_0 = (Keyword)cOpAssignment_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionNumericExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cOpAvgKeyword_4_0_0 = (Keyword)cOpAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpression_listAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpression_listNumericExpression_ListParserRuleCall_4_2_0 = (RuleCall)cExpression_listAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOpAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cOpMaxKeyword_5_0_0 = (Keyword)cOpAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpression_listAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpression_listNumericExpression_ListParserRuleCall_5_2_0 = (RuleCall)cExpression_listAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cOpAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cOpMinKeyword_6_0_0 = (Keyword)cOpAssignment_6_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExpression_listAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cExpression_listNumericExpression_ListParserRuleCall_6_2_0 = (RuleCall)cExpression_listAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cOpMulKeyword_7_0_0 = (Keyword)cOpAssignment_7_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cExpression_listAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cExpression_listNumericExpression_ListParserRuleCall_7_2_0 = (RuleCall)cExpression_listAssignment_7_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cOpAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cOpSumKeyword_8_0_0 = (Keyword)cOpAssignment_8_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cExpression_listAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cExpression_listNumericExpression_ListParserRuleCall_8_2_0 = (RuleCall)cExpression_listAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//NumericExpression:
		//	value=Integer | value=Real | op="neg" expression=NumericExpression | op="abs" expression=NumericExpression | op="avg"
		//	"(" expression_list=NumericExpression_List ")" | op="max" "(" expression_list=NumericExpression_List ")" | op="min"
		//	"(" expression_list=NumericExpression_List ")" | op="mul" "(" expression_list=NumericExpression_List ")" | op="sum"
		//	"(" expression_list=NumericExpression_List ")";
		public ParserRule getRule() { return rule; }

		//value=Integer | value=Real | op="neg" expression=NumericExpression | op="abs" expression=NumericExpression | op="avg"
		//"(" expression_list=NumericExpression_List ")" | op="max" "(" expression_list=NumericExpression_List ")" | op="min" "("
		//expression_list=NumericExpression_List ")" | op="mul" "(" expression_list=NumericExpression_List ")" | op="sum" "("
		//expression_list=NumericExpression_List ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=Integer
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_0_0() { return cValueIntegerParserRuleCall_0_0; }

		//value=Real
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Real
		public RuleCall getValueRealParserRuleCall_1_0() { return cValueRealParserRuleCall_1_0; }

		//op="neg" expression=NumericExpression
		public Group getGroup_2() { return cGroup_2; }

		//op="neg"
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }

		//"neg"
		public Keyword getOpNegKeyword_2_0_0() { return cOpNegKeyword_2_0_0; }

		//expression=NumericExpression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//NumericExpression
		public RuleCall getExpressionNumericExpressionParserRuleCall_2_1_0() { return cExpressionNumericExpressionParserRuleCall_2_1_0; }

		//op="abs" expression=NumericExpression
		public Group getGroup_3() { return cGroup_3; }

		//op="abs"
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }

		//"abs"
		public Keyword getOpAbsKeyword_3_0_0() { return cOpAbsKeyword_3_0_0; }

		//expression=NumericExpression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//NumericExpression
		public RuleCall getExpressionNumericExpressionParserRuleCall_3_1_0() { return cExpressionNumericExpressionParserRuleCall_3_1_0; }

		//op="avg" "(" expression_list=NumericExpression_List ")"
		public Group getGroup_4() { return cGroup_4; }

		//op="avg"
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }

		//"avg"
		public Keyword getOpAvgKeyword_4_0_0() { return cOpAvgKeyword_4_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//expression_list=NumericExpression_List
		public Assignment getExpression_listAssignment_4_2() { return cExpression_listAssignment_4_2; }

		//NumericExpression_List
		public RuleCall getExpression_listNumericExpression_ListParserRuleCall_4_2_0() { return cExpression_listNumericExpression_ListParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//op="max" "(" expression_list=NumericExpression_List ")"
		public Group getGroup_5() { return cGroup_5; }

		//op="max"
		public Assignment getOpAssignment_5_0() { return cOpAssignment_5_0; }

		//"max"
		public Keyword getOpMaxKeyword_5_0_0() { return cOpMaxKeyword_5_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//expression_list=NumericExpression_List
		public Assignment getExpression_listAssignment_5_2() { return cExpression_listAssignment_5_2; }

		//NumericExpression_List
		public RuleCall getExpression_listNumericExpression_ListParserRuleCall_5_2_0() { return cExpression_listNumericExpression_ListParserRuleCall_5_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//op="min" "(" expression_list=NumericExpression_List ")"
		public Group getGroup_6() { return cGroup_6; }

		//op="min"
		public Assignment getOpAssignment_6_0() { return cOpAssignment_6_0; }

		//"min"
		public Keyword getOpMinKeyword_6_0_0() { return cOpMinKeyword_6_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//expression_list=NumericExpression_List
		public Assignment getExpression_listAssignment_6_2() { return cExpression_listAssignment_6_2; }

		//NumericExpression_List
		public RuleCall getExpression_listNumericExpression_ListParserRuleCall_6_2_0() { return cExpression_listNumericExpression_ListParserRuleCall_6_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }

		//op="mul" "(" expression_list=NumericExpression_List ")"
		public Group getGroup_7() { return cGroup_7; }

		//op="mul"
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }

		//"mul"
		public Keyword getOpMulKeyword_7_0_0() { return cOpMulKeyword_7_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//expression_list=NumericExpression_List
		public Assignment getExpression_listAssignment_7_2() { return cExpression_listAssignment_7_2; }

		//NumericExpression_List
		public RuleCall getExpression_listNumericExpression_ListParserRuleCall_7_2_0() { return cExpression_listNumericExpression_ListParserRuleCall_7_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }

		//op="sum" "(" expression_list=NumericExpression_List ")"
		public Group getGroup_8() { return cGroup_8; }

		//op="sum"
		public Assignment getOpAssignment_8_0() { return cOpAssignment_8_0; }

		//"sum"
		public Keyword getOpSumKeyword_8_0_0() { return cOpSumKeyword_8_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }

		//expression_list=NumericExpression_List
		public Assignment getExpression_listAssignment_8_2() { return cExpression_listAssignment_8_2; }

		//NumericExpression_List
		public RuleCall getExpression_listNumericExpression_ListParserRuleCall_8_2_0() { return cExpression_listNumericExpression_ListParserRuleCall_8_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}

	public class NumericExpression_ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericExpression_List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExNumericExpressionParserRuleCall_0_0 = (RuleCall)cExAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExNumericExpressionParserRuleCall_1_1_0 = (RuleCall)cExAssignment_1_1.eContents().get(0);
		
		//NumericExpression_List:
		//	ex+=NumericExpression ("," ex+=NumericExpression)*;
		public ParserRule getRule() { return rule; }

		//ex+=NumericExpression ("," ex+=NumericExpression)*
		public Group getGroup() { return cGroup; }

		//ex+=NumericExpression
		public Assignment getExAssignment_0() { return cExAssignment_0; }

		//NumericExpression
		public RuleCall getExNumericExpressionParserRuleCall_0_0() { return cExNumericExpressionParserRuleCall_0_0; }

		//("," ex+=NumericExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ex+=NumericExpression
		public Assignment getExAssignment_1_1() { return cExAssignment_1_1; }

		//NumericExpression
		public RuleCall getExNumericExpressionParserRuleCall_1_1_0() { return cExNumericExpressionParserRuleCall_1_1_0; }
	}

	public class BooleanExpression_ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression_List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExBooleanExpressionParserRuleCall_0_0 = (RuleCall)cExAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExBooleanExpressionParserRuleCall_1_1_0 = (RuleCall)cExAssignment_1_1.eContents().get(0);
		
		//BooleanExpression_List:
		//	ex+=BooleanExpression ("," ex+=BooleanExpression)*;
		public ParserRule getRule() { return rule; }

		//ex+=BooleanExpression ("," ex+=BooleanExpression)*
		public Group getGroup() { return cGroup; }

		//ex+=BooleanExpression
		public Assignment getExAssignment_0() { return cExAssignment_0; }

		//BooleanExpression
		public RuleCall getExBooleanExpressionParserRuleCall_0_0() { return cExBooleanExpressionParserRuleCall_0_0; }

		//("," ex+=BooleanExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ex+=BooleanExpression
		public Assignment getExAssignment_1_1() { return cExAssignment_1_1; }

		//BooleanExpression
		public RuleCall getExBooleanExpressionParserRuleCall_1_1_0() { return cExBooleanExpressionParserRuleCall_1_1_0; }
	}

	public class ObjectivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Objectives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectivesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectivesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjectivesObjectiveParserRuleCall_1_0 = (RuleCall)cObjectivesAssignment_1.eContents().get(0);
		
		/// **
		// * 5. OBJECTIVES CHAPTER
		// * / Objectives:
		//	"Objectives:" objectives+=Objective+;
		public ParserRule getRule() { return rule; }

		//"Objectives:" objectives+=Objective+
		public Group getGroup() { return cGroup; }

		//"Objectives:"
		public Keyword getObjectivesKeyword_0() { return cObjectivesKeyword_0; }

		//objectives+=Objective+
		public Assignment getObjectivesAssignment_1() { return cObjectivesAssignment_1; }

		//Objective
		public RuleCall getObjectivesObjectiveParserRuleCall_1_0() { return cObjectivesObjectiveParserRuleCall_1_0; }
	}

	public class ObjectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Objective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cOpAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final Keyword cOpMaxKeyword_3_0_0_0 = (Keyword)cOpAssignment_3_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cExpressionObjectiveExpressionParserRuleCall_3_0_2_0 = (RuleCall)cExpressionAssignment_3_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cOpAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Keyword cOpMinKeyword_3_1_0_0 = (Keyword)cOpAssignment_3_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cExpressionAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cExpressionObjectiveExpressionParserRuleCall_3_1_2_0 = (RuleCall)cExpressionAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Objective:
		//	"objective" name=ID "{" (op="max" "(" expression=ObjectiveExpression ")" | op="min" "(" expression=ObjectiveExpression
		//	")") //|   mao: 4/03/2014: other operators will be added if needed. The only examples that I have now uses Minimization or Maximization
		//	"}";
		public ParserRule getRule() { return rule; }

		//"objective" name=ID "{" (op="max" "(" expression=ObjectiveExpression ")" | op="min" "(" expression=ObjectiveExpression
		//")") //|   mao: 4/03/2014: other operators will be added if needed. The only examples that I have now uses Minimization or Maximization
		//"}"
		public Group getGroup() { return cGroup; }

		//"objective"
		public Keyword getObjectiveKeyword_0() { return cObjectiveKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//op="max" "(" expression=ObjectiveExpression ")" | op="min" "(" expression=ObjectiveExpression ")"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//op="max" "(" expression=ObjectiveExpression ")"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//op="max"
		public Assignment getOpAssignment_3_0_0() { return cOpAssignment_3_0_0; }

		//"max"
		public Keyword getOpMaxKeyword_3_0_0_0() { return cOpMaxKeyword_3_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0_1() { return cLeftParenthesisKeyword_3_0_1; }

		//expression=ObjectiveExpression
		public Assignment getExpressionAssignment_3_0_2() { return cExpressionAssignment_3_0_2; }

		//ObjectiveExpression
		public RuleCall getExpressionObjectiveExpressionParserRuleCall_3_0_2_0() { return cExpressionObjectiveExpressionParserRuleCall_3_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_0_3() { return cRightParenthesisKeyword_3_0_3; }

		//op="min" "(" expression=ObjectiveExpression ")"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//op="min"
		public Assignment getOpAssignment_3_1_0() { return cOpAssignment_3_1_0; }

		//"min"
		public Keyword getOpMinKeyword_3_1_0_0() { return cOpMinKeyword_3_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1_1() { return cLeftParenthesisKeyword_3_1_1; }

		//expression=ObjectiveExpression
		public Assignment getExpressionAssignment_3_1_2() { return cExpressionAssignment_3_1_2; }

		//ObjectiveExpression
		public RuleCall getExpressionObjectiveExpressionParserRuleCall_3_1_2_0() { return cExpressionObjectiveExpressionParserRuleCall_3_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_1_3() { return cRightParenthesisKeyword_3_1_3; }

		////|   mao: 4/03/2014: other operators will be added if needed. The only examples that I have now uses Minimization or Maximization
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObjectiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpSumKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionPrimitiveExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////|   mao: 4/03/2014: other operators will be added if needed. The only examples that I have used are Sum, e.g., sum *.cost, which means, to sum the cost of all the features
		//ObjectiveExpression:
		//	op="sum" "(" expression=PrimitiveExpression ")";
		public ParserRule getRule() { return rule; }

		//op="sum" "(" expression=PrimitiveExpression ")"
		public Group getGroup() { return cGroup; }

		//op="sum"
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"sum"
		public Keyword getOpSumKeyword_0_0() { return cOpSumKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=PrimitiveExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//PrimitiveExpression
		public RuleCall getExpressionPrimitiveExpressionParserRuleCall_2_0() { return cExpressionPrimitiveExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ConfigurationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configurations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigurationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigurationsConfigurationParserRuleCall_1_0 = (RuleCall)cConfigurationsAssignment_1.eContents().get(0);
		
		/// **
		// * 6. CONFIGURATION CHAPTER
		// * / Configurations:
		//	"Configurations:" configurations+=Configuration+;
		public ParserRule getRule() { return rule; }

		//"Configurations:" configurations+=Configuration+
		public Group getGroup() { return cGroup; }

		//"Configurations:"
		public Keyword getConfigurationsKeyword_0() { return cConfigurationsKeyword_0; }

		//configurations+=Configuration+
		public Assignment getConfigurationsAssignment_1() { return cConfigurationsAssignment_1; }

		//Configuration
		public RuleCall getConfigurationsConfigurationParserRuleCall_1_0() { return cConfigurationsConfigurationParserRuleCall_1_0; }
	}

	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBooleanValuationAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBooleanValuationBooleanValuationParserRuleCall_3_0_0 = (RuleCall)cBooleanValuationAssignment_3_0.eContents().get(0);
		private final Assignment cExtendedValuationAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cExtendedValuationExtendedValuationParserRuleCall_3_1_0 = (RuleCall)cExtendedValuationAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Configuration:
		//	"configuration" name=ID "{" (booleanValuation+=BooleanValuation //mao: 14/01/2013: this works well for boolean variability models
		//	| extendedValuation+= //mao: 14/01/2013: this works well for extended or cardinality-based feature models		 	
		//	ExtendedValuation)+ "}";
		public ParserRule getRule() { return rule; }

		//"configuration" name=ID "{" (booleanValuation+=BooleanValuation //mao: 14/01/2013: this works well for boolean variability models
		//| extendedValuation+= //mao: 14/01/2013: this works well for extended or cardinality-based feature models		 	
		//ExtendedValuation)+ "}"
		public Group getGroup() { return cGroup; }

		//"configuration"
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(booleanValuation+=BooleanValuation //mao: 14/01/2013: this works well for boolean variability models
		//| extendedValuation+= //mao: 14/01/2013: this works well for extended or cardinality-based feature models		 	
		//ExtendedValuation)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//booleanValuation+=BooleanValuation
		public Assignment getBooleanValuationAssignment_3_0() { return cBooleanValuationAssignment_3_0; }

		//BooleanValuation
		public RuleCall getBooleanValuationBooleanValuationParserRuleCall_3_0_0() { return cBooleanValuationBooleanValuationParserRuleCall_3_0_0; }

		//extendedValuation+= //mao: 14/01/2013: this works well for extended or cardinality-based feature models		 	
		//ExtendedValuation
		public Assignment getExtendedValuationAssignment_3_1() { return cExtendedValuationAssignment_3_1; }

		////mao: 14/01/2013: this works well for extended or cardinality-based feature models		 	
		//ExtendedValuation
		public RuleCall getExtendedValuationExtendedValuationParserRuleCall_3_1_0() { return cExtendedValuationExtendedValuationParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BooleanValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNotSelectedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNotSelectedExclamationMarkKeyword_0_0 = (Keyword)cNotSelectedAssignment_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureFeatureCrossReference_1_0.eContents().get(1);
		
		//BooleanValuation:
		//	notSelected?="!"? feature= //it simplifies the way to write FEATURE.selected = true to only write the feature name		
		//	[Feature];
		public ParserRule getRule() { return rule; }

		//notSelected?="!"? feature= //it simplifies the way to write FEATURE.selected = true to only write the feature name		
		//[Feature]
		public Group getGroup() { return cGroup; }

		//notSelected?="!"?
		public Assignment getNotSelectedAssignment_0() { return cNotSelectedAssignment_0; }

		//"!"
		public Keyword getNotSelectedExclamationMarkKeyword_0_0() { return cNotSelectedExclamationMarkKeyword_0_0; }

		//feature= //it simplifies the way to write FEATURE.selected = true to only write the feature name		
		//[Feature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		////it simplifies the way to write FEATURE.selected = true to only write the feature name		
		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_1_0() { return cFeatureFeatureCrossReference_1_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_1_0_1() { return cFeatureFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class ExtendedValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtendedValuation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicAttrValuationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAdvancedAttrValuationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExtendedValuation:
		//	BasicAttrValuation | AdvancedAttrValuation;
		public ParserRule getRule() { return rule; }

		//BasicAttrValuation | AdvancedAttrValuation
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicAttrValuation
		public RuleCall getBasicAttrValuationParserRuleCall_0() { return cBasicAttrValuationParserRuleCall_0; }

		//AdvancedAttrValuation
		public RuleCall getAdvancedAttrValuationParserRuleCall_1() { return cAdvancedAttrValuationParserRuleCall_1; }
	}

	public class BasicAttrValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicAttrValuation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringAttrValuationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanAttrValuationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerAttrValuationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealAttrValuationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BasicAttrValuation:
		//	StringAttrValuation | BooleanAttrValuation | IntegerAttrValuation | RealAttrValuation;
		public ParserRule getRule() { return rule; }

		//StringAttrValuation | BooleanAttrValuation | IntegerAttrValuation | RealAttrValuation
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringAttrValuation
		public RuleCall getStringAttrValuationParserRuleCall_0() { return cStringAttrValuationParserRuleCall_0; }

		//BooleanAttrValuation
		public RuleCall getBooleanAttrValuationParserRuleCall_1() { return cBooleanAttrValuationParserRuleCall_1; }

		//IntegerAttrValuation
		public RuleCall getIntegerAttrValuationParserRuleCall_2() { return cIntegerAttrValuationParserRuleCall_2; }

		//RealAttrValuation
		public RuleCall getRealAttrValuationParserRuleCall_3() { return cRealAttrValuationParserRuleCall_3; }
	}

	public class RealAttrValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealAttrValuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cRefAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefAttReal_ATT_IDCrossReference_1_0 = (CrossReference)cRefAttAssignment_1.eContents().get(0);
		private final RuleCall cRefAttReal_ATT_IDIDTerminalRuleCall_1_0_1 = (RuleCall)cRefAttReal_ATT_IDCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueRealParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////mao: I will create later a 'real expression' instead of just Real
		//RealAttrValuation:
		//	head=AttHead? refAtt=[Real_ATT_ID] "=" value=Real;
		public ParserRule getRule() { return rule; }

		//head=AttHead? refAtt=[Real_ATT_ID] "=" value=Real
		public Group getGroup() { return cGroup; }

		//head=AttHead?
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//refAtt=[Real_ATT_ID]
		public Assignment getRefAttAssignment_1() { return cRefAttAssignment_1; }

		//[Real_ATT_ID]
		public CrossReference getRefAttReal_ATT_IDCrossReference_1_0() { return cRefAttReal_ATT_IDCrossReference_1_0; }

		//ID
		public RuleCall getRefAttReal_ATT_IDIDTerminalRuleCall_1_0_1() { return cRefAttReal_ATT_IDIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Real
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Real
		public RuleCall getValueRealParserRuleCall_3_0() { return cValueRealParserRuleCall_3_0; }
	}

	public class IntegerAttrValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAttrValuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cRefAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefAttInteger_ATT_IDCrossReference_1_0 = (CrossReference)cRefAttAssignment_1.eContents().get(0);
		private final RuleCall cRefAttInteger_ATT_IDIDTerminalRuleCall_1_0_1 = (RuleCall)cRefAttInteger_ATT_IDCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIntegerParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//IntegerAttrValuation:
		//	head=AttHead? refAtt=[Integer_ATT_ID] "=" value=Integer;
		public ParserRule getRule() { return rule; }

		//head=AttHead? refAtt=[Integer_ATT_ID] "=" value=Integer
		public Group getGroup() { return cGroup; }

		//head=AttHead?
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//refAtt=[Integer_ATT_ID]
		public Assignment getRefAttAssignment_1() { return cRefAttAssignment_1; }

		//[Integer_ATT_ID]
		public CrossReference getRefAttInteger_ATT_IDCrossReference_1_0() { return cRefAttInteger_ATT_IDCrossReference_1_0; }

		//ID
		public RuleCall getRefAttInteger_ATT_IDIDTerminalRuleCall_1_0_1() { return cRefAttInteger_ATT_IDIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Integer
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_3_0() { return cValueIntegerParserRuleCall_3_0; }
	}

	public class BooleanAttrValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanAttrValuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cRefAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefAttBoolean_ATT_IDCrossReference_1_0 = (CrossReference)cRefAttAssignment_1.eContents().get(0);
		private final RuleCall cRefAttBoolean_ATT_IDIDTerminalRuleCall_1_0_1 = (RuleCall)cRefAttBoolean_ATT_IDCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_0_0 = (Keyword)cValueAlternatives_3_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_0_1 = (Keyword)cValueAlternatives_3_0.eContents().get(1);
		
		//BooleanAttrValuation:
		//	head=AttHead? refAtt=[Boolean_ATT_ID] "=" value=("true" | "false");
		public ParserRule getRule() { return rule; }

		//head=AttHead? refAtt=[Boolean_ATT_ID] "=" value=("true" | "false")
		public Group getGroup() { return cGroup; }

		//head=AttHead?
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//refAtt=[Boolean_ATT_ID]
		public Assignment getRefAttAssignment_1() { return cRefAttAssignment_1; }

		//[Boolean_ATT_ID]
		public CrossReference getRefAttBoolean_ATT_IDCrossReference_1_0() { return cRefAttBoolean_ATT_IDCrossReference_1_0; }

		//ID
		public RuleCall getRefAttBoolean_ATT_IDIDTerminalRuleCall_1_0_1() { return cRefAttBoolean_ATT_IDIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=("true" | "false")
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//"true" | "false"
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }

		//"true"
		public Keyword getValueTrueKeyword_3_0_0() { return cValueTrueKeyword_3_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_3_0_1() { return cValueFalseKeyword_3_0_1; }
	}

	public class StringAttrValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringAttrValuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cRefAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefAttString_ATT_IDCrossReference_1_0 = (CrossReference)cRefAttAssignment_1.eContents().get(0);
		private final RuleCall cRefAttString_ATT_IDIDTerminalRuleCall_1_0_1 = (RuleCall)cRefAttString_ATT_IDCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//StringAttrValuation:
		//	head=AttHead? refAtt=[String_ATT_ID] "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//head=AttHead? refAtt=[String_ATT_ID] "=" value=STRING
		public Group getGroup() { return cGroup; }

		//head=AttHead?
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//refAtt=[String_ATT_ID]
		public Assignment getRefAttAssignment_1() { return cRefAttAssignment_1; }

		//[String_ATT_ID]
		public CrossReference getRefAttString_ATT_IDCrossReference_1_0() { return cRefAttString_ATT_IDCrossReference_1_0; }

		//ID
		public RuleCall getRefAttString_ATT_IDIDTerminalRuleCall_1_0_1() { return cRefAttString_ATT_IDIDTerminalRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class AdvancedAttrValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdvancedAttrValuation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAttVsValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAttVsValTableBasedValuationByFeatureParserRuleCall_0_0 = (RuleCall)cAttVsValAssignment_0.eContents().get(0);
		private final Assignment cFeatVsValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFeatVsValTableBasedValuationByAttributeParserRuleCall_1_0 = (RuleCall)cFeatVsValAssignment_1.eContents().get(0);
		private final Assignment cAttVsValForMultiFeatureAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAttVsValForMultiFeatureTableBasedValuationByFeatureAndCloneParserRuleCall_2_0 = (RuleCall)cAttVsValForMultiFeatureAssignment_2.eContents().get(0);
		
		//AdvancedAttrValuation:
		//	attVsVal=TableBasedValuationByFeature | featVsVal+=TableBasedValuationByAttribute |
		//	attVsValForMultiFeature=TableBasedValuationByFeatureAndClone;
		public ParserRule getRule() { return rule; }

		//attVsVal=TableBasedValuationByFeature | featVsVal+=TableBasedValuationByAttribute |
		//attVsValForMultiFeature=TableBasedValuationByFeatureAndClone
		public Alternatives getAlternatives() { return cAlternatives; }

		//attVsVal=TableBasedValuationByFeature
		public Assignment getAttVsValAssignment_0() { return cAttVsValAssignment_0; }

		//TableBasedValuationByFeature
		public RuleCall getAttVsValTableBasedValuationByFeatureParserRuleCall_0_0() { return cAttVsValTableBasedValuationByFeatureParserRuleCall_0_0; }

		//featVsVal+=TableBasedValuationByAttribute
		public Assignment getFeatVsValAssignment_1() { return cFeatVsValAssignment_1; }

		//TableBasedValuationByAttribute
		public RuleCall getFeatVsValTableBasedValuationByAttributeParserRuleCall_1_0() { return cFeatVsValTableBasedValuationByAttributeParserRuleCall_1_0; }

		//attVsValForMultiFeature=TableBasedValuationByFeatureAndClone
		public Assignment getAttVsValForMultiFeatureAssignment_2() { return cAttVsValForMultiFeatureAssignment_2; }

		//TableBasedValuationByFeatureAndClone
		public RuleCall getAttVsValForMultiFeatureTableBasedValuationByFeatureAndCloneParserRuleCall_2_0() { return cAttVsValForMultiFeatureTableBasedValuationByFeatureAndCloneParserRuleCall_2_0; }
	}

	public class TableBasedValuationByFeatureAndCloneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableBasedValuationByFeatureAndClone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cAttributeValuePairsForCloneFeatureKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cRefFeatureAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final CrossReference cRefFeatureFeatureCrossReference_0_0_1_0 = (CrossReference)cRefFeatureAssignment_0_0_1.eContents().get(0);
		private final RuleCall cRefFeatureFeatureIDTerminalRuleCall_0_0_1_0_1 = (RuleCall)cRefFeatureFeatureCrossReference_0_0_1_0.eContents().get(1);
		private final Keyword cCloneKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cNameAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_0_0_3_0 = (RuleCall)cNameAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cRefFeatureAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final CrossReference cRefFeatureFeatureCrossReference_0_1_0_0 = (CrossReference)cRefFeatureAssignment_0_1_0.eContents().get(0);
		private final RuleCall cRefFeatureFeatureIDTerminalRuleCall_0_1_0_0_1 = (RuleCall)cRefFeatureFeatureCrossReference_0_1_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPairsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPairsPairAttributeValueParserRuleCall_2_0 = (RuleCall)cPairsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPairsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPairsPairAttributeValueParserRuleCall_3_1_0 = (RuleCall)cPairsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TableBasedValuationByFeatureAndClone:
		//	("attribute-value pairs for clone feature:" refFeature=[Feature] "clone:" name=ID //long way
		//	//short way
		//	| refFeature=[Feature] "[" name=ID "]") "{" pairs+=PairAttributeValue ("," pairs+=PairAttributeValue)* "}";
		public ParserRule getRule() { return rule; }

		//("attribute-value pairs for clone feature:" refFeature=[Feature] "clone:" name=ID //long way
		////short way
		//| refFeature=[Feature] "[" name=ID "]") "{" pairs+=PairAttributeValue ("," pairs+=PairAttributeValue)* "}"
		public Group getGroup() { return cGroup; }

		//"attribute-value pairs for clone feature:" refFeature=[Feature] "clone:" name=ID //long way
		////short way
		//| refFeature=[Feature] "[" name=ID "]"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"attribute-value pairs for clone feature:" refFeature=[Feature] "clone:" name=ID
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"attribute-value pairs for clone feature:"
		public Keyword getAttributeValuePairsForCloneFeatureKeyword_0_0_0() { return cAttributeValuePairsForCloneFeatureKeyword_0_0_0; }

		//refFeature=[Feature]
		public Assignment getRefFeatureAssignment_0_0_1() { return cRefFeatureAssignment_0_0_1; }

		//[Feature]
		public CrossReference getRefFeatureFeatureCrossReference_0_0_1_0() { return cRefFeatureFeatureCrossReference_0_0_1_0; }

		//ID
		public RuleCall getRefFeatureFeatureIDTerminalRuleCall_0_0_1_0_1() { return cRefFeatureFeatureIDTerminalRuleCall_0_0_1_0_1; }

		//"clone:"
		public Keyword getCloneKeyword_0_0_2() { return cCloneKeyword_0_0_2; }

		//name=ID
		public Assignment getNameAssignment_0_0_3() { return cNameAssignment_0_0_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_3_0() { return cNameIDTerminalRuleCall_0_0_3_0; }

		//refFeature=[Feature] "[" name=ID "]"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//refFeature=[Feature]
		public Assignment getRefFeatureAssignment_0_1_0() { return cRefFeatureAssignment_0_1_0; }

		//[Feature]
		public CrossReference getRefFeatureFeatureCrossReference_0_1_0_0() { return cRefFeatureFeatureCrossReference_0_1_0_0; }

		//ID
		public RuleCall getRefFeatureFeatureIDTerminalRuleCall_0_1_0_0_1() { return cRefFeatureFeatureIDTerminalRuleCall_0_1_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_1() { return cLeftSquareBracketKeyword_0_1_1; }

		//name=ID
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_2_0() { return cNameIDTerminalRuleCall_0_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_3() { return cRightSquareBracketKeyword_0_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//pairs+=PairAttributeValue
		public Assignment getPairsAssignment_2() { return cPairsAssignment_2; }

		//PairAttributeValue
		public RuleCall getPairsPairAttributeValueParserRuleCall_2_0() { return cPairsPairAttributeValueParserRuleCall_2_0; }

		//("," pairs+=PairAttributeValue)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//pairs+=PairAttributeValue
		public Assignment getPairsAssignment_3_1() { return cPairsAssignment_3_1; }

		//PairAttributeValue
		public RuleCall getPairsPairAttributeValueParserRuleCall_3_1_0() { return cPairsPairAttributeValueParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TableBasedValuationByFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableBasedValuationByFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeValuePairsForFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefFeatureFeatureCrossReference_1_0 = (CrossReference)cRefFeatureAssignment_1.eContents().get(0);
		private final RuleCall cRefFeatureFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cRefFeatureFeatureCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPairsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPairsPairAttributeValueParserRuleCall_3_0 = (RuleCall)cPairsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPairsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPairsPairAttributeValueParserRuleCall_4_1_0 = (RuleCall)cPairsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TableBasedValuationByFeature:
		//	"attribute-value pairs for feature:"? refFeature=[Feature] "{" pairs+=PairAttributeValue (","
		//	pairs+=PairAttributeValue)* "}";
		public ParserRule getRule() { return rule; }

		//"attribute-value pairs for feature:"? refFeature=[Feature] "{" pairs+=PairAttributeValue (","
		//pairs+=PairAttributeValue)* "}"
		public Group getGroup() { return cGroup; }

		//"attribute-value pairs for feature:"?
		public Keyword getAttributeValuePairsForFeatureKeyword_0() { return cAttributeValuePairsForFeatureKeyword_0; }

		//refFeature=[Feature]
		public Assignment getRefFeatureAssignment_1() { return cRefFeatureAssignment_1; }

		//[Feature]
		public CrossReference getRefFeatureFeatureCrossReference_1_0() { return cRefFeatureFeatureCrossReference_1_0; }

		//ID
		public RuleCall getRefFeatureFeatureIDTerminalRuleCall_1_0_1() { return cRefFeatureFeatureIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//pairs+=PairAttributeValue
		public Assignment getPairsAssignment_3() { return cPairsAssignment_3; }

		//PairAttributeValue
		public RuleCall getPairsPairAttributeValueParserRuleCall_3_0() { return cPairsPairAttributeValueParserRuleCall_3_0; }

		//("," pairs+=PairAttributeValue)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//pairs+=PairAttributeValue
		public Assignment getPairsAssignment_4_1() { return cPairsAssignment_4_1; }

		//PairAttributeValue
		public RuleCall getPairsPairAttributeValueParserRuleCall_4_1_0() { return cPairsPairAttributeValueParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PairAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PairAttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRefAttAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cRefAttReal_ATT_IDCrossReference_0_0_0 = (CrossReference)cRefAttAssignment_0_0.eContents().get(0);
		private final RuleCall cRefAttReal_ATT_IDIDTerminalRuleCall_0_0_0_1 = (RuleCall)cRefAttReal_ATT_IDCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueRealParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRefAttAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cRefAttInteger_ATT_IDCrossReference_1_0_0 = (CrossReference)cRefAttAssignment_1_0.eContents().get(0);
		private final RuleCall cRefAttInteger_ATT_IDIDTerminalRuleCall_1_0_0_1 = (RuleCall)cRefAttInteger_ATT_IDCrossReference_1_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cRefAttAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cRefAttBoolean_ATT_IDCrossReference_2_0_0 = (CrossReference)cRefAttAssignment_2_0.eContents().get(0);
		private final RuleCall cRefAttBoolean_ATT_IDIDTerminalRuleCall_2_0_0_1 = (RuleCall)cRefAttBoolean_ATT_IDCrossReference_2_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Alternatives cValueAlternatives_2_2_0 = (Alternatives)cValueAssignment_2_2.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_2_0_0 = (Keyword)cValueAlternatives_2_2_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_2_0_1 = (Keyword)cValueAlternatives_2_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cRefAttAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cRefAttString_ATT_IDCrossReference_3_0_0 = (CrossReference)cRefAttAssignment_3_0.eContents().get(0);
		private final RuleCall cRefAttString_ATT_IDIDTerminalRuleCall_3_0_0_1 = (RuleCall)cRefAttString_ATT_IDCrossReference_3_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		
		//PairAttributeValue:
		//	refAtt=[Real_ATT_ID] "=" value=Real | refAtt=[Integer_ATT_ID] "=" value=Integer | refAtt=[Boolean_ATT_ID] "="
		//	value=("true" | "false") | refAtt=[String_ATT_ID] "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//refAtt=[Real_ATT_ID] "=" value=Real | refAtt=[Integer_ATT_ID] "=" value=Integer | refAtt=[Boolean_ATT_ID] "="
		//value=("true" | "false") | refAtt=[String_ATT_ID] "=" value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//refAtt=[Real_ATT_ID] "=" value=Real
		public Group getGroup_0() { return cGroup_0; }

		//refAtt=[Real_ATT_ID]
		public Assignment getRefAttAssignment_0_0() { return cRefAttAssignment_0_0; }

		//[Real_ATT_ID]
		public CrossReference getRefAttReal_ATT_IDCrossReference_0_0_0() { return cRefAttReal_ATT_IDCrossReference_0_0_0; }

		//ID
		public RuleCall getRefAttReal_ATT_IDIDTerminalRuleCall_0_0_0_1() { return cRefAttReal_ATT_IDIDTerminalRuleCall_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//value=Real
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//Real
		public RuleCall getValueRealParserRuleCall_0_2_0() { return cValueRealParserRuleCall_0_2_0; }

		//refAtt=[Integer_ATT_ID] "=" value=Integer
		public Group getGroup_1() { return cGroup_1; }

		//refAtt=[Integer_ATT_ID]
		public Assignment getRefAttAssignment_1_0() { return cRefAttAssignment_1_0; }

		//[Integer_ATT_ID]
		public CrossReference getRefAttInteger_ATT_IDCrossReference_1_0_0() { return cRefAttInteger_ATT_IDCrossReference_1_0_0; }

		//ID
		public RuleCall getRefAttInteger_ATT_IDIDTerminalRuleCall_1_0_0_1() { return cRefAttInteger_ATT_IDIDTerminalRuleCall_1_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//value=Integer
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_1_2_0() { return cValueIntegerParserRuleCall_1_2_0; }

		//refAtt=[Boolean_ATT_ID] "=" value=("true" | "false")
		public Group getGroup_2() { return cGroup_2; }

		//refAtt=[Boolean_ATT_ID]
		public Assignment getRefAttAssignment_2_0() { return cRefAttAssignment_2_0; }

		//[Boolean_ATT_ID]
		public CrossReference getRefAttBoolean_ATT_IDCrossReference_2_0_0() { return cRefAttBoolean_ATT_IDCrossReference_2_0_0; }

		//ID
		public RuleCall getRefAttBoolean_ATT_IDIDTerminalRuleCall_2_0_0_1() { return cRefAttBoolean_ATT_IDIDTerminalRuleCall_2_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_2_0() { return cValueAlternatives_2_2_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_2_0_0() { return cValueTrueKeyword_2_2_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_2_0_1() { return cValueFalseKeyword_2_2_0_1; }

		//refAtt=[String_ATT_ID] "=" value=STRING
		public Group getGroup_3() { return cGroup_3; }

		//refAtt=[String_ATT_ID]
		public Assignment getRefAttAssignment_3_0() { return cRefAttAssignment_3_0; }

		//[String_ATT_ID]
		public CrossReference getRefAttString_ATT_IDCrossReference_3_0_0() { return cRefAttString_ATT_IDCrossReference_3_0_0; }

		//ID
		public RuleCall getRefAttString_ATT_IDIDTerminalRuleCall_3_0_0_1() { return cRefAttString_ATT_IDIDTerminalRuleCall_3_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }

		//value=STRING
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_2_0() { return cValueSTRINGTerminalRuleCall_3_2_0; }
	}

	public class TableBasedValuationByAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableBasedValuationByAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cFeatureValuePairsForAttributeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTableBasedValuationByAttributeForIntegerParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cTableBasedValuationByAttributeForRealParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TableBasedValuationByAttribute:
		//	"feature-value pairs for attribute:"? TableBasedValuationByAttributeForInteger |
		//	TableBasedValuationByAttributeForReal;
		public ParserRule getRule() { return rule; }

		//"feature-value pairs for attribute:"? TableBasedValuationByAttributeForInteger | TableBasedValuationByAttributeForReal
		public Alternatives getAlternatives() { return cAlternatives; }

		//"feature-value pairs for attribute:"? TableBasedValuationByAttributeForInteger
		public Group getGroup_0() { return cGroup_0; }

		//"feature-value pairs for attribute:"?
		public Keyword getFeatureValuePairsForAttributeKeyword_0_0() { return cFeatureValuePairsForAttributeKeyword_0_0; }

		//TableBasedValuationByAttributeForInteger
		public RuleCall getTableBasedValuationByAttributeForIntegerParserRuleCall_0_1() { return cTableBasedValuationByAttributeForIntegerParserRuleCall_0_1; }

		//TableBasedValuationByAttributeForReal
		public RuleCall getTableBasedValuationByAttributeForRealParserRuleCall_1() { return cTableBasedValuationByAttributeForRealParserRuleCall_1; }
	}

	public class TableBasedValuationByAttributeForIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableBasedValuationByAttributeForInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefAttInteger_ATT_IDCrossReference_0_0 = (CrossReference)cRefAttAssignment_0.eContents().get(0);
		private final RuleCall cRefAttInteger_ATT_IDIDTerminalRuleCall_0_0_1 = (RuleCall)cRefAttInteger_ATT_IDCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPairsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPairsPairFeatureIntegerParserRuleCall_2_0 = (RuleCall)cPairsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPairsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPairsPairFeatureIntegerParserRuleCall_3_1_0 = (RuleCall)cPairsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TableBasedValuationByAttributeForInteger:
		//	refAtt=[Integer_ATT_ID] "{" pairs+=PairFeatureInteger ("," pairs+=PairFeatureInteger)* "}";
		public ParserRule getRule() { return rule; }

		//refAtt=[Integer_ATT_ID] "{" pairs+=PairFeatureInteger ("," pairs+=PairFeatureInteger)* "}"
		public Group getGroup() { return cGroup; }

		//refAtt=[Integer_ATT_ID]
		public Assignment getRefAttAssignment_0() { return cRefAttAssignment_0; }

		//[Integer_ATT_ID]
		public CrossReference getRefAttInteger_ATT_IDCrossReference_0_0() { return cRefAttInteger_ATT_IDCrossReference_0_0; }

		//ID
		public RuleCall getRefAttInteger_ATT_IDIDTerminalRuleCall_0_0_1() { return cRefAttInteger_ATT_IDIDTerminalRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//pairs+=PairFeatureInteger
		public Assignment getPairsAssignment_2() { return cPairsAssignment_2; }

		//PairFeatureInteger
		public RuleCall getPairsPairFeatureIntegerParserRuleCall_2_0() { return cPairsPairFeatureIntegerParserRuleCall_2_0; }

		//("," pairs+=PairFeatureInteger)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//pairs+=PairFeatureInteger
		public Assignment getPairsAssignment_3_1() { return cPairsAssignment_3_1; }

		//PairFeatureInteger
		public RuleCall getPairsPairFeatureIntegerParserRuleCall_3_1_0() { return cPairsPairFeatureIntegerParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PairFeatureIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PairFeatureInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefFeatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefFeatFeatureCrossReference_0_0 = (CrossReference)cRefFeatAssignment_0.eContents().get(0);
		private final RuleCall cRefFeatFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cRefFeatFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PairFeatureInteger:
		//	refFeat=[Feature] "-" value=Integer;
		public ParserRule getRule() { return rule; }

		//refFeat=[Feature] "-" value=Integer
		public Group getGroup() { return cGroup; }

		//refFeat=[Feature]
		public Assignment getRefFeatAssignment_0() { return cRefFeatAssignment_0; }

		//[Feature]
		public CrossReference getRefFeatFeatureCrossReference_0_0() { return cRefFeatFeatureCrossReference_0_0; }

		//ID
		public RuleCall getRefFeatFeatureIDTerminalRuleCall_0_0_1() { return cRefFeatFeatureIDTerminalRuleCall_0_0_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//value=Integer
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Integer
		public RuleCall getValueIntegerParserRuleCall_2_0() { return cValueIntegerParserRuleCall_2_0; }
	}

	public class TableBasedValuationByAttributeForRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableBasedValuationByAttributeForReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAttAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefAttReal_ATT_IDCrossReference_0_0 = (CrossReference)cRefAttAssignment_0.eContents().get(0);
		private final RuleCall cRefAttReal_ATT_IDIDTerminalRuleCall_0_0_1 = (RuleCall)cRefAttReal_ATT_IDCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPairsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPairsPairFeatureRealParserRuleCall_2_0 = (RuleCall)cPairsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPairsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPairsPairFeatureRealParserRuleCall_3_1_0 = (RuleCall)cPairsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TableBasedValuationByAttributeForReal:
		//	refAtt=[Real_ATT_ID] "{" pairs+=PairFeatureReal ("," pairs+=PairFeatureReal)* "}";
		public ParserRule getRule() { return rule; }

		//refAtt=[Real_ATT_ID] "{" pairs+=PairFeatureReal ("," pairs+=PairFeatureReal)* "}"
		public Group getGroup() { return cGroup; }

		//refAtt=[Real_ATT_ID]
		public Assignment getRefAttAssignment_0() { return cRefAttAssignment_0; }

		//[Real_ATT_ID]
		public CrossReference getRefAttReal_ATT_IDCrossReference_0_0() { return cRefAttReal_ATT_IDCrossReference_0_0; }

		//ID
		public RuleCall getRefAttReal_ATT_IDIDTerminalRuleCall_0_0_1() { return cRefAttReal_ATT_IDIDTerminalRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//pairs+=PairFeatureReal
		public Assignment getPairsAssignment_2() { return cPairsAssignment_2; }

		//PairFeatureReal
		public RuleCall getPairsPairFeatureRealParserRuleCall_2_0() { return cPairsPairFeatureRealParserRuleCall_2_0; }

		//("," pairs+=PairFeatureReal)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//pairs+=PairFeatureReal
		public Assignment getPairsAssignment_3_1() { return cPairsAssignment_3_1; }

		//PairFeatureReal
		public RuleCall getPairsPairFeatureRealParserRuleCall_3_1_0() { return cPairsPairFeatureRealParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PairFeatureRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PairFeatureReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefFeatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefFeatFeatureCrossReference_0_0 = (CrossReference)cRefFeatAssignment_0.eContents().get(0);
		private final RuleCall cRefFeatFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cRefFeatFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueRealParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PairFeatureReal:
		//	refFeat=[Feature] "-" value=Real;
		public ParserRule getRule() { return rule; }

		//refFeat=[Feature] "-" value=Real
		public Group getGroup() { return cGroup; }

		//refFeat=[Feature]
		public Assignment getRefFeatAssignment_0() { return cRefFeatAssignment_0; }

		//[Feature]
		public CrossReference getRefFeatFeatureCrossReference_0_0() { return cRefFeatFeatureCrossReference_0_0; }

		//ID
		public RuleCall getRefFeatFeatureIDTerminalRuleCall_0_0_1() { return cRefFeatFeatureIDTerminalRuleCall_0_0_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//value=Real
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Real
		public RuleCall getValueRealParserRuleCall_2_0() { return cValueRealParserRuleCall_2_0; }
	}

	public class RealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Real");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		/// *
		// * 7. TERMINALS and IDS CHAPTER
		// * 
		// * / Real:
		//	Integer "." INT;
		public ParserRule getRule() { return rule; }

		//Integer "." INT
		public Group getGroup() { return cGroup; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Integer:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class Boolean_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean_ATT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/// **
		//		 * mao 3/10/2013: The purpose of having att_id for each type of attribute is to guarantee type safety when writing expressions. 
		//		 * The other alternative was to allow any combinations of operands in the expressions and operations. However, it would require to create runtime verification.
		//		 * In other words, although the VM grammar seems a little bit verbose, it helps to guarantee type safety by construction and not by post-modeling type safety checking.    
		//		 * / Boolean_ATT_ID:
		//	head=AttHead name=ID;
		public ParserRule getRule() { return rule; }

		//head=AttHead name=ID
		public Group getGroup() { return cGroup; }

		//head=AttHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class String_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String_ATT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//String_ATT_ID:
		//	head=AttHead name=ID;
		public ParserRule getRule() { return rule; }

		//head=AttHead name=ID
		public Group getGroup() { return cGroup; }

		//head=AttHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Integer_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer_ATT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Integer_ATT_ID:
		//	head=AttHead name=ID;
		public ParserRule getRule() { return rule; }

		//head=AttHead name=ID
		public Group getGroup() { return cGroup; }

		//head=AttHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Real_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Real_ATT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Real_ATT_ID:
		//	head=AttHead name=ID;
		public ParserRule getRule() { return rule; }

		//head=AttHead name=ID
		public Group getGroup() { return cGroup; }

		//head=AttHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Enum_String_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum_String_ATT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Enum_String_ATT_ID:
		//	head=AttHead name=ID;
		public ParserRule getRule() { return rule; }

		//head=AttHead name=ID
		public Group getGroup() { return cGroup; }

		//head=AttHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Enum_Integer_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum_Integer_ATT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Enum_Integer_ATT_ID:
		//	head=AttHead name=ID;
		public ParserRule getRule() { return rule; }

		//head=AttHead name=ID
		public Group getGroup() { return cGroup; }

		//head=AttHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Enum_Real_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum_Real_ATT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadAttHeadParserRuleCall_0_0 = (RuleCall)cHeadAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Enum_Real_ATT_ID:
		//	head=AttHead name=ID;
		public ParserRule getRule() { return rule; }

		//head=AttHead name=ID
		public Group getGroup() { return cGroup; }

		//head=AttHead
		public Assignment getHeadAssignment_0() { return cHeadAssignment_0; }

		//AttHead
		public RuleCall getHeadAttHeadParserRuleCall_0_0() { return cHeadAttHeadParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AttHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttHead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cForAllFeaturesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cForAllFeaturesAsteriskFullStopKeyword_0_0 = (Keyword)cForAllFeaturesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOwnedFeatureAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cOwnedFeatureFeatureCrossReference_1_0_0 = (CrossReference)cOwnedFeatureAssignment_1_0.eContents().get(0);
		private final RuleCall cOwnedFeatureFeatureIDTerminalRuleCall_1_0_0_1 = (RuleCall)cOwnedFeatureFeatureCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//AttHead:
		//	forAllFeatures?="*." | ownedFeature=[Feature] ".";
		public ParserRule getRule() { return rule; }

		//forAllFeatures?="*." | ownedFeature=[Feature] "."
		public Alternatives getAlternatives() { return cAlternatives; }

		//forAllFeatures?="*."
		public Assignment getForAllFeaturesAssignment_0() { return cForAllFeaturesAssignment_0; }

		//"*."
		public Keyword getForAllFeaturesAsteriskFullStopKeyword_0_0() { return cForAllFeaturesAsteriskFullStopKeyword_0_0; }

		//ownedFeature=[Feature] "."
		public Group getGroup_1() { return cGroup_1; }

		//ownedFeature=[Feature]
		public Assignment getOwnedFeatureAssignment_1_0() { return cOwnedFeatureAssignment_1_0; }

		//[Feature]
		public CrossReference getOwnedFeatureFeatureCrossReference_1_0_0() { return cOwnedFeatureFeatureCrossReference_1_0_0; }

		//ID
		public RuleCall getOwnedFeatureFeatureIDTerminalRuleCall_1_0_0_1() { return cOwnedFeatureFeatureIDTerminalRuleCall_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
	}

	public class Abstract_ATT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abstract_ATT_ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolean_ATT_IDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cString_ATT_IDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInteger_ATT_IDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReal_ATT_IDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnum_String_ATT_IDParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnum_Integer_ATT_IDParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEnum_Real_ATT_IDParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Abstract_ATT_ID:
		//	Boolean_ATT_ID | String_ATT_ID | Integer_ATT_ID | Real_ATT_ID | Enum_String_ATT_ID | Enum_Integer_ATT_ID |
		//	Enum_Real_ATT_ID;
		public ParserRule getRule() { return rule; }

		//Boolean_ATT_ID | String_ATT_ID | Integer_ATT_ID | Real_ATT_ID | Enum_String_ATT_ID | Enum_Integer_ATT_ID |
		//Enum_Real_ATT_ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//Boolean_ATT_ID
		public RuleCall getBoolean_ATT_IDParserRuleCall_0() { return cBoolean_ATT_IDParserRuleCall_0; }

		//String_ATT_ID
		public RuleCall getString_ATT_IDParserRuleCall_1() { return cString_ATT_IDParserRuleCall_1; }

		//Integer_ATT_ID
		public RuleCall getInteger_ATT_IDParserRuleCall_2() { return cInteger_ATT_IDParserRuleCall_2; }

		//Real_ATT_ID
		public RuleCall getReal_ATT_IDParserRuleCall_3() { return cReal_ATT_IDParserRuleCall_3; }

		//Enum_String_ATT_ID
		public RuleCall getEnum_String_ATT_IDParserRuleCall_4() { return cEnum_String_ATT_IDParserRuleCall_4; }

		//Enum_Integer_ATT_ID
		public RuleCall getEnum_Integer_ATT_IDParserRuleCall_5() { return cEnum_Integer_ATT_IDParserRuleCall_5; }

		//Enum_Real_ATT_ID
		public RuleCall getEnum_Real_ATT_IDParserRuleCall_6() { return cEnum_Real_ATT_IDParserRuleCall_6; }
	}
	
	
	private ModelElements pModel;
	private VmBlockElements pVmBlock;
	private PackageDeclarationElements pPackageDeclaration;
	private ImportDeclarationElements pImportDeclaration;
	private MetaDataDeclarationElements pMetaDataDeclaration;
	private EmailElements pEmail;
	private VersionElements pVersion;
	private RelationshipsElements pRelationships;
	private FeatureHierarchyElements pFeatureHierarchy;
	private FeatureDefinitionElements pFeatureDefinition;
	private FeatureElements pFeature;
	private FeaturesGroupElements pFeaturesGroup;
	private XorgroupElements pXorgroup;
	private OrgroupElements pOrgroup;
	private CardinalityBasedElements pCardinalityBased;
	private AttributesElements pAttributes;
	private AttrDefElements pAttrDef;
	private BasicAttrDefElements pBasicAttrDef;
	private BooleanAttrDefElements pBooleanAttrDef;
	private StringAttrDefElements pStringAttrDef;
	private IntegerAttrDefElements pIntegerAttrDef;
	private IntegerAttrDefBoundedElements pIntegerAttrDefBounded;
	private IntegerAttrDefComplementElements pIntegerAttrDefComplement;
	private IntegerAttrDefUnboundedElements pIntegerAttrDefUnbounded;
	private RealAttrDefElements pRealAttrDef;
	private RealAttrDefBoundedElements pRealAttrDefBounded;
	private RealAttrDefComplementElements pRealAttrDefComplement;
	private RealAttrDefUnboundedElements pRealAttrDefUnbounded;
	private EnumAttrDefElements pEnumAttrDef;
	private EnumStringDefElements pEnumStringDef;
	private EnumIntegerDefElements pEnumIntegerDef;
	private EnumRealDefElements pEnumRealDef;
	private BoolDefaultDefElements pBoolDefaultDef;
	private StringDefaultDefElements pStringDefaultDef;
	private IntegerDeltaDefElements pIntegerDeltaDef;
	private IntegerDefaultDefElements pIntegerDefaultDef;
	private RealDeltaDefElements pRealDeltaDef;
	private RealDefaultDefElements pRealDefaultDef;
	private DescriptionsElements pDescriptions;
	private FeatureDescriptionElements pFeatureDescription;
	private AttributeDescriptionElements pAttributeDescription;
	private ConstraintsElements pConstraints;
	private ConstraintElements pConstraint;
	private SubExpression0Elements pSubExpression0;
	private SubExpression1Elements pSubExpression1;
	private SubExpression2Elements pSubExpression2;
	private SubExpression3Elements pSubExpression3;
	private SubExpression4Elements pSubExpression4;
	private SubExpression5Elements pSubExpression5;
	private SubExpression6Elements pSubExpression6;
	private SubExpression7Elements pSubExpression7;
	private SubExpression8Elements pSubExpression8;
	private SubExpression9Elements pSubExpression9;
	private SubExpression10Elements pSubExpression10;
	private ExpressionElements pExpression;
	private SpecialExpressionElements pSpecialExpression;
	private StringExpressionElements pStringExpression;
	private PrimitiveExpressionElements pPrimitiveExpression;
	private BooleanExpressionElements pBooleanExpression;
	private BrackedExpressionElements pBrackedExpression;
	private NumericExpressionElements pNumericExpression;
	private NumericExpression_ListElements pNumericExpression_List;
	private BooleanExpression_ListElements pBooleanExpression_List;
	private ObjectivesElements pObjectives;
	private ObjectiveElements pObjective;
	private ObjectiveExpressionElements pObjectiveExpression;
	private ConfigurationsElements pConfigurations;
	private ConfigurationElements pConfiguration;
	private BooleanValuationElements pBooleanValuation;
	private ExtendedValuationElements pExtendedValuation;
	private BasicAttrValuationElements pBasicAttrValuation;
	private RealAttrValuationElements pRealAttrValuation;
	private IntegerAttrValuationElements pIntegerAttrValuation;
	private BooleanAttrValuationElements pBooleanAttrValuation;
	private StringAttrValuationElements pStringAttrValuation;
	private AdvancedAttrValuationElements pAdvancedAttrValuation;
	private TableBasedValuationByFeatureAndCloneElements pTableBasedValuationByFeatureAndClone;
	private TableBasedValuationByFeatureElements pTableBasedValuationByFeature;
	private PairAttributeValueElements pPairAttributeValue;
	private TableBasedValuationByAttributeElements pTableBasedValuationByAttribute;
	private TableBasedValuationByAttributeForIntegerElements pTableBasedValuationByAttributeForInteger;
	private PairFeatureIntegerElements pPairFeatureInteger;
	private TableBasedValuationByAttributeForRealElements pTableBasedValuationByAttributeForReal;
	private PairFeatureRealElements pPairFeatureReal;
	private RealElements pReal;
	private IntegerElements pInteger;
	private QualifiedNameElements pQualifiedName;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private Boolean_ATT_IDElements pBoolean_ATT_ID;
	private String_ATT_IDElements pString_ATT_ID;
	private Integer_ATT_IDElements pInteger_ATT_ID;
	private Real_ATT_IDElements pReal_ATT_ID;
	private Enum_String_ATT_IDElements pEnum_String_ATT_ID;
	private Enum_Integer_ATT_IDElements pEnum_Integer_ATT_ID;
	private Enum_Real_ATT_IDElements pEnum_Real_ATT_ID;
	private AttHeadElements pAttHead;
	private Abstract_ATT_IDElements pAbstract_ATT_ID;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public VMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.lang.VM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * @name Variability Modeling (VM) language grammar
	// * @version: 2.1 (models created with previous versions are incompatible)
	// * @description: This version replaces the version VM2.0 located in https://github.com/ViViD-DiverSE/VM-Source which was used in the MOTIV project that finished in November, 2014. 
	// * @author: Mauricio Alferez (mauricioalferez.com), based on Mathieu Acher (mathieuacher.com) VM1.0
	// * @email: alferez.mauricio@gmail.com
	// * @organization: DiverSE group at INRIA, Rennes, France (http://diverse.irisa.fr)
	// * @date: 18/07/2013 - First commit
	// * / Model:
	//	blocks+=VmBlock*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//VmBlock:
	//	PackageDeclaration | ImportDeclaration | MetaDataDeclaration | Relationships | Attributes | Descriptions | Constraints
	//	| Objectives | Configurations;
	public VmBlockElements getVmBlockAccess() {
		return (pVmBlock != null) ? pVmBlock : (pVmBlock = new VmBlockElements());
	}
	
	public ParserRule getVmBlockRule() {
		return getVmBlockAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName "{" blocks+=VmBlock* "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//ImportDeclaration:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportDeclarationElements getImportDeclarationAccess() {
		return (pImportDeclaration != null) ? pImportDeclaration : (pImportDeclaration = new ImportDeclarationElements());
	}
	
	public ParserRule getImportDeclarationRule() {
		return getImportDeclarationAccess().getRule();
	}

	//MetaDataDeclaration:
	//	"@name" name=STRING & ("@version" version=Version)? & ("@description" description=STRING)? & ("@author"
	//	author=STRING)? & ("@email" email=Email)? & ("@organization" organization=STRING)? & ("@publication"
	//	publication=STRING)? & ("@date" date=STRING)?;
	public MetaDataDeclarationElements getMetaDataDeclarationAccess() {
		return (pMetaDataDeclaration != null) ? pMetaDataDeclaration : (pMetaDataDeclaration = new MetaDataDeclarationElements());
	}
	
	public ParserRule getMetaDataDeclarationRule() {
		return getMetaDataDeclarationAccess().getRule();
	}

	//Email:
	//	username=QualifiedName "@" domain=QualifiedName;
	public EmailElements getEmailAccess() {
		return (pEmail != null) ? pEmail : (pEmail = new EmailElements());
	}
	
	public ParserRule getEmailRule() {
		return getEmailAccess().getRule();
	}

	//Version:
	//	main=INT ("." tail+=INT)*;
	public VersionElements getVersionAccess() {
		return (pVersion != null) ? pVersion : (pVersion = new VersionElements());
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	/// **
	// * 1. RELATIONSHIPS CHAPTER
	// * / Relationships:
	//	"Relationships:" root=FeatureHierarchy;
	public RelationshipsElements getRelationshipsAccess() {
		return (pRelationships != null) ? pRelationships : (pRelationships = new RelationshipsElements());
	}
	
	public ParserRule getRelationshipsRule() {
		return getRelationshipsAccess().getRule();
	}

	//FeatureHierarchy:
	//	parent=Feature "{" children+=FeatureDefinition+ "}";
	public FeatureHierarchyElements getFeatureHierarchyAccess() {
		return (pFeatureHierarchy != null) ? pFeatureHierarchy : (pFeatureHierarchy = new FeatureHierarchyElements());
	}
	
	public ParserRule getFeatureHierarchyRule() {
		return getFeatureHierarchyAccess().getRule();
	}

	//FeatureDefinition:
	//	Feature | FeaturesGroup | FeatureHierarchy;
	public FeatureDefinitionElements getFeatureDefinitionAccess() {
		return (pFeatureDefinition != null) ? pFeatureDefinition : (pFeatureDefinition = new FeatureDefinitionElements());
	}
	
	public ParserRule getFeatureDefinitionRule() {
		return getFeatureDefinitionAccess().getRule();
	}

	//Feature:
	//	(notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" |
	//	"@NotDecideable")?) optional?="?"? ("cloneBetween" min=Integer "and" max=Integer | "[" min=Integer ".." max=Integer
	//	"]")? name=ID;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	////| Mutexgroup
	//FeaturesGroup:
	//	Xorgroup | Orgroup | CardinalityBased;
	public FeaturesGroupElements getFeaturesGroupAccess() {
		return (pFeaturesGroup != null) ? pFeaturesGroup : (pFeaturesGroup = new FeaturesGroupElements());
	}
	
	public ParserRule getFeaturesGroupRule() {
		return getFeaturesGroupAccess().getRule();
	}

	//Xorgroup:
	//	"oneOf" "{" groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}";
	public XorgroupElements getXorgroupAccess() {
		return (pXorgroup != null) ? pXorgroup : (pXorgroup = new XorgroupElements());
	}
	
	public ParserRule getXorgroupRule() {
		return getXorgroupAccess().getRule();
	}

	//Orgroup:
	//	"someOf" "{" groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}";
	public OrgroupElements getOrgroupAccess() {
		return (pOrgroup != null) ? pOrgroup : (pOrgroup = new OrgroupElements());
	}
	
	public ParserRule getOrgroupRule() {
		return getOrgroupAccess().getRule();
	}

	//CardinalityBased:
	//	("someBetween" min=Integer "and" max=Integer | "[" min=Integer ".." (max=Integer | all?="*") "]") "{"
	//	groupedFeatures+=(Feature | FeatureHierarchy) groupedFeatures+=(Feature | FeatureHierarchy)+ "}";
	public CardinalityBasedElements getCardinalityBasedAccess() {
		return (pCardinalityBased != null) ? pCardinalityBased : (pCardinalityBased = new CardinalityBasedElements());
	}
	
	public ParserRule getCardinalityBasedRule() {
		return getCardinalityBasedAccess().getRule();
	}

	/// **
	// * 2. ATTRIBUTES CHAPTER
	// * / Attributes:
	//	"Attributes:" (attrDefs+=AttrDef | attrValuations+=BasicAttrValuation)+;
	public AttributesElements getAttributesAccess() {
		return (pAttributes != null) ? pAttributes : (pAttributes = new AttributesElements());
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}

	/// *
	//		 * mao 23/07/2013: The purpose of dividing basic attributes is to ease type checking
	//		 * 
	//		 * / AttrDef:
	//	(notTranslatable?=("@NT" | "@NotTranslatable")? runTime?=("@RT" | "@RunTime")? notDecidable?=("@ND" |
	//	"@NotDecideable")?) (basicAttrDef=BasicAttrDef | enumAttrDef=EnumAttrDef);
	public AttrDefElements getAttrDefAccess() {
		return (pAttrDef != null) ? pAttrDef : (pAttrDef = new AttrDefElements());
	}
	
	public ParserRule getAttrDefRule() {
		return getAttrDefAccess().getRule();
	}

	//BasicAttrDef:
	//	BooleanAttrDef | StringAttrDef | IntegerAttrDef | RealAttrDef;
	public BasicAttrDefElements getBasicAttrDefAccess() {
		return (pBasicAttrDef != null) ? pBasicAttrDef : (pBasicAttrDef = new BasicAttrDefElements());
	}
	
	public ParserRule getBasicAttrDefRule() {
		return getBasicAttrDefAccess().getRule();
	}

	//BooleanAttrDef:
	//	"boolean" name=Boolean_ATT_ID ("=" value=("true" | "false"))? default=BoolDefaultDef?;
	public BooleanAttrDefElements getBooleanAttrDefAccess() {
		return (pBooleanAttrDef != null) ? pBooleanAttrDef : (pBooleanAttrDef = new BooleanAttrDefElements());
	}
	
	public ParserRule getBooleanAttrDefRule() {
		return getBooleanAttrDefAccess().getRule();
	}

	//StringAttrDef:
	//	"string" name=String_ATT_ID ("=" value=STRING)? default=StringDefaultDef?;
	public StringAttrDefElements getStringAttrDefAccess() {
		return (pStringAttrDef != null) ? pStringAttrDef : (pStringAttrDef = new StringAttrDefElements());
	}
	
	public ParserRule getStringAttrDefRule() {
		return getStringAttrDefAccess().getRule();
	}

	//IntegerAttrDef:
	//	IntegerAttrDefBounded | IntegerAttrDefUnbounded;
	public IntegerAttrDefElements getIntegerAttrDefAccess() {
		return (pIntegerAttrDef != null) ? pIntegerAttrDef : (pIntegerAttrDef = new IntegerAttrDefElements());
	}
	
	public ParserRule getIntegerAttrDefRule() {
		return getIntegerAttrDefAccess().getRule();
	}

	//IntegerAttrDefBounded:
	//	"int" name=Integer_ATT_ID (complements+=IntegerAttrDefComplement complement+=IntegerAttrDefComplement*)
	//	default=IntegerDefaultDef?;
	public IntegerAttrDefBoundedElements getIntegerAttrDefBoundedAccess() {
		return (pIntegerAttrDefBounded != null) ? pIntegerAttrDefBounded : (pIntegerAttrDefBounded = new IntegerAttrDefBoundedElements());
	}
	
	public ParserRule getIntegerAttrDefBoundedRule() {
		return getIntegerAttrDefBoundedAccess().getRule();
	}

	//IntegerAttrDefComplement:
	//	"[" min=Integer ".." max=Integer "]" delta=IntegerDeltaDef?;
	public IntegerAttrDefComplementElements getIntegerAttrDefComplementAccess() {
		return (pIntegerAttrDefComplement != null) ? pIntegerAttrDefComplement : (pIntegerAttrDefComplement = new IntegerAttrDefComplementElements());
	}
	
	public ParserRule getIntegerAttrDefComplementRule() {
		return getIntegerAttrDefComplementAccess().getRule();
	}

	////mao 5/2/2014, delta MUST NOT be considered in an unbounded attribute definition.
	//IntegerAttrDefUnbounded:
	//	"int" name=Integer_ATT_ID ("=" value=Integer | default=IntegerDefaultDef)?;
	public IntegerAttrDefUnboundedElements getIntegerAttrDefUnboundedAccess() {
		return (pIntegerAttrDefUnbounded != null) ? pIntegerAttrDefUnbounded : (pIntegerAttrDefUnbounded = new IntegerAttrDefUnboundedElements());
	}
	
	public ParserRule getIntegerAttrDefUnboundedRule() {
		return getIntegerAttrDefUnboundedAccess().getRule();
	}

	//RealAttrDef:
	//	RealAttrDefBounded | RealAttrDefUnbounded;
	public RealAttrDefElements getRealAttrDefAccess() {
		return (pRealAttrDef != null) ? pRealAttrDef : (pRealAttrDef = new RealAttrDefElements());
	}
	
	public ParserRule getRealAttrDefRule() {
		return getRealAttrDefAccess().getRule();
	}

	//RealAttrDefBounded:
	//	"real" name=Real_ATT_ID (complement+=RealAttrDefComplement complement+=RealAttrDefComplement*)
	//	default=RealDefaultDef?;
	public RealAttrDefBoundedElements getRealAttrDefBoundedAccess() {
		return (pRealAttrDefBounded != null) ? pRealAttrDefBounded : (pRealAttrDefBounded = new RealAttrDefBoundedElements());
	}
	
	public ParserRule getRealAttrDefBoundedRule() {
		return getRealAttrDefBoundedAccess().getRule();
	}

	//RealAttrDefComplement:
	//	"[" min=Real ".." max=Real "]" delta=RealDeltaDef?;
	public RealAttrDefComplementElements getRealAttrDefComplementAccess() {
		return (pRealAttrDefComplement != null) ? pRealAttrDefComplement : (pRealAttrDefComplement = new RealAttrDefComplementElements());
	}
	
	public ParserRule getRealAttrDefComplementRule() {
		return getRealAttrDefComplementAccess().getRule();
	}

	////mao 5/2/2014, delta MUST NOT be considered in an unbounded attribute definition.
	//RealAttrDefUnbounded:
	//	"real" name=Real_ATT_ID ("=" value=Real | default=RealDefaultDef)?;
	public RealAttrDefUnboundedElements getRealAttrDefUnboundedAccess() {
		return (pRealAttrDefUnbounded != null) ? pRealAttrDefUnbounded : (pRealAttrDefUnbounded = new RealAttrDefUnboundedElements());
	}
	
	public ParserRule getRealAttrDefUnboundedRule() {
		return getRealAttrDefUnboundedAccess().getRule();
	}

	/// *
	//		 * mao 23/07/2013: The purpose of dividing enumerations is to type check that all the enumerated values are identified and treated as members of the same domain
	//		 * 
	//		 * / EnumAttrDef:
	//	EnumIntegerDef | EnumStringDef | EnumRealDef;
	public EnumAttrDefElements getEnumAttrDefAccess() {
		return (pEnumAttrDef != null) ? pEnumAttrDef : (pEnumAttrDef = new EnumAttrDefElements());
	}
	
	public ParserRule getEnumAttrDefRule() {
		return getEnumAttrDefAccess().getRule();
	}

	//EnumStringDef:
	//	"enum" name=Enum_String_ATT_ID "[" value+=STRING ("," value+=STRING)+ "]" default=StringDefaultDef?;
	public EnumStringDefElements getEnumStringDefAccess() {
		return (pEnumStringDef != null) ? pEnumStringDef : (pEnumStringDef = new EnumStringDefElements());
	}
	
	public ParserRule getEnumStringDefRule() {
		return getEnumStringDefAccess().getRule();
	}

	//EnumIntegerDef:
	//	"enum" name=Enum_Integer_ATT_ID "[" value+=Integer ("," value+=Integer)+ "]" default=IntegerDefaultDef?;
	public EnumIntegerDefElements getEnumIntegerDefAccess() {
		return (pEnumIntegerDef != null) ? pEnumIntegerDef : (pEnumIntegerDef = new EnumIntegerDefElements());
	}
	
	public ParserRule getEnumIntegerDefRule() {
		return getEnumIntegerDefAccess().getRule();
	}

	//EnumRealDef:
	//	"enum" name=Enum_Real_ATT_ID "[" value+=Real ("," value+=Real)+ "]" default=RealDefaultDef?;
	public EnumRealDefElements getEnumRealDefAccess() {
		return (pEnumRealDef != null) ? pEnumRealDef : (pEnumRealDef = new EnumRealDefElements());
	}
	
	public ParserRule getEnumRealDefRule() {
		return getEnumRealDefAccess().getRule();
	}

	//BoolDefaultDef:
	//	"default" value=("true" | "false");
	public BoolDefaultDefElements getBoolDefaultDefAccess() {
		return (pBoolDefaultDef != null) ? pBoolDefaultDef : (pBoolDefaultDef = new BoolDefaultDefElements());
	}
	
	public ParserRule getBoolDefaultDefRule() {
		return getBoolDefaultDefAccess().getRule();
	}

	//StringDefaultDef:
	//	"default" value=STRING;
	public StringDefaultDefElements getStringDefaultDefAccess() {
		return (pStringDefaultDef != null) ? pStringDefaultDef : (pStringDefaultDef = new StringDefaultDefElements());
	}
	
	public ParserRule getStringDefaultDefRule() {
		return getStringDefaultDefAccess().getRule();
	}

	//IntegerDeltaDef:
	//	"delta" value=INT;
	public IntegerDeltaDefElements getIntegerDeltaDefAccess() {
		return (pIntegerDeltaDef != null) ? pIntegerDeltaDef : (pIntegerDeltaDef = new IntegerDeltaDefElements());
	}
	
	public ParserRule getIntegerDeltaDefRule() {
		return getIntegerDeltaDefAccess().getRule();
	}

	//IntegerDefaultDef:
	//	"default" value=INT;
	public IntegerDefaultDefElements getIntegerDefaultDefAccess() {
		return (pIntegerDefaultDef != null) ? pIntegerDefaultDef : (pIntegerDefaultDef = new IntegerDefaultDefElements());
	}
	
	public ParserRule getIntegerDefaultDefRule() {
		return getIntegerDefaultDefAccess().getRule();
	}

	//RealDeltaDef:
	//	"delta" value=Real;
	public RealDeltaDefElements getRealDeltaDefAccess() {
		return (pRealDeltaDef != null) ? pRealDeltaDef : (pRealDeltaDef = new RealDeltaDefElements());
	}
	
	public ParserRule getRealDeltaDefRule() {
		return getRealDeltaDefAccess().getRule();
	}

	//RealDefaultDef:
	//	"default" value=Real;
	public RealDefaultDefElements getRealDefaultDefAccess() {
		return (pRealDefaultDef != null) ? pRealDefaultDef : (pRealDefaultDef = new RealDefaultDefElements());
	}
	
	public ParserRule getRealDefaultDefRule() {
		return getRealDefaultDefAccess().getRule();
	}

	/// *
	// * 3. DESCRIPTIONS CHAPTER
	// * / Descriptions:
	//	"Descriptions:" (featuresDescriptions+=FeatureDescription | attributesDescriptions+=AttributeDescription)+;
	public DescriptionsElements getDescriptionsAccess() {
		return (pDescriptions != null) ? pDescriptions : (pDescriptions = new DescriptionsElements());
	}
	
	public ParserRule getDescriptionsRule() {
		return getDescriptionsAccess().getRule();
	}

	//FeatureDescription: //'feat' refFeat=[Feature|QualifiedName] "is" description=STRING; //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference a feature using the syntax of a qualified name (i.e., packageA.subpackageB.featureC)
	//	"feat" refFeat=[Feature] "is" description=STRING;
	public FeatureDescriptionElements getFeatureDescriptionAccess() {
		return (pFeatureDescription != null) ? pFeatureDescription : (pFeatureDescription = new FeatureDescriptionElements());
	}
	
	public ParserRule getFeatureDescriptionRule() {
		return getFeatureDescriptionAccess().getRule();
	}

	//AttributeDescription: //'att' ('*.' | refAtt=[Abstract_ATT_ID|QualifiedName]) "is" description=STRING;  //mao 27/11/2013 The symbol '|' does not mean the logic Or. "|" rather allows to reference an attribute using the syntax of a qualified name (i.e., packageA.subpackageB.featureC.attributeD)
	//	"att" ("*." | refFeat=[Feature] ".")? refAtt=[Abstract_ATT_ID] "is" description=STRING;
	public AttributeDescriptionElements getAttributeDescriptionAccess() {
		return (pAttributeDescription != null) ? pAttributeDescription : (pAttributeDescription = new AttributeDescriptionElements());
	}
	
	public ParserRule getAttributeDescriptionRule() {
		return getAttributeDescriptionAccess().getRule();
	}

	/// *
	// * 4. CONSTRAINTS CHAPTER
	// * 
	// * / Constraints:
	//	"Constraints:" constraints+=Constraint+;
	public ConstraintsElements getConstraintsAccess() {
		return (pConstraints != null) ? pConstraints : (pConstraints = new ConstraintsElements());
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}

	//Constraint:
	//	("constraint" name=ID "=")? expression=SubExpression0;
	public ConstraintElements getConstraintAccess() {
		return (pConstraint != null) ? pConstraint : (pConstraint = new ConstraintElements());
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	////if then else
	//SubExpression0 returns ComplexExpression:
	//	SubExpression1 => ({If.left=current} "?" right+=SubExpression0 ":" right+=SubExpression1)*;
	public SubExpression0Elements getSubExpression0Access() {
		return (pSubExpression0 != null) ? pSubExpression0 : (pSubExpression0 = new SubExpression0Elements());
	}
	
	public ParserRule getSubExpression0Rule() {
		return getSubExpression0Access().getRule();
	}

	////a implies b
	//SubExpression1 returns ComplexExpression:
	//	SubExpression2 => ({LeftImplication.left=current} "<-" right=SubExpression2)*;
	public SubExpression1Elements getSubExpression1Access() {
		return (pSubExpression1 != null) ? pSubExpression1 : (pSubExpression1 = new SubExpression1Elements());
	}
	
	public ParserRule getSubExpression1Rule() {
		return getSubExpression1Access().getRule();
	}

	////b implies a
	//SubExpression2 returns ComplexExpression:
	//	SubExpression3 => ({RightImplication.left=current} "->" right=SubExpression3)*;
	public SubExpression2Elements getSubExpression2Access() {
		return (pSubExpression2 != null) ? pSubExpression2 : (pSubExpression2 = new SubExpression2Elements());
	}
	
	public ParserRule getSubExpression2Rule() {
		return getSubExpression2Access().getRule();
	}

	//// a iff b
	//SubExpression3 returns ComplexExpression:
	//	SubExpression4 => ({BiImplication.left=current} "<->" right=SubExpression4)*;
	public SubExpression3Elements getSubExpression3Access() {
		return (pSubExpression3 != null) ? pSubExpression3 : (pSubExpression3 = new SubExpression3Elements());
	}
	
	public ParserRule getSubExpression3Rule() {
		return getSubExpression3Access().getRule();
	}

	////or
	//SubExpression4 returns ComplexExpression:
	//	SubExpression5 => ({Or.left=current} "||" right=SubExpression5)*;
	public SubExpression4Elements getSubExpression4Access() {
		return (pSubExpression4 != null) ? pSubExpression4 : (pSubExpression4 = new SubExpression4Elements());
	}
	
	public ParserRule getSubExpression4Rule() {
		return getSubExpression4Access().getRule();
	}

	////and
	//SubExpression5 returns ComplexExpression:
	//	SubExpression6 => ({And.left=current} "&&" right=SubExpression6)*;
	public SubExpression5Elements getSubExpression5Access() {
		return (pSubExpression5 != null) ? pSubExpression5 : (pSubExpression5 = new SubExpression5Elements());
	}
	
	public ParserRule getSubExpression5Rule() {
		return getSubExpression5Access().getRule();
	}

	//// a == b, a !=b
	//SubExpression6 returns ComplexExpression:
	//	SubExpression7 => ((({Equality.left=current} "==" | {Inequality.left=current} "!=") right=SubExpression7)*)?;
	public SubExpression6Elements getSubExpression6Access() {
		return (pSubExpression6 != null) ? pSubExpression6 : (pSubExpression6 = new SubExpression6Elements());
	}
	
	public ParserRule getSubExpression6Rule() {
		return getSubExpression6Access().getRule();
	}

	//SubExpression7 returns ComplexExpression:
	//	SubExpression8 => (({Less.left=current} "<" => ({Lessequal.left=current} "=")? | {Greater.left=current} ">" =>
	//	({Greaterequal.left=current} "=")?) right=SubExpression8)*;
	public SubExpression7Elements getSubExpression7Access() {
		return (pSubExpression7 != null) ? pSubExpression7 : (pSubExpression7 = new SubExpression7Elements());
	}
	
	public ParserRule getSubExpression7Rule() {
		return getSubExpression7Access().getRule();
	}

	//SubExpression8 returns ComplexExpression:
	//	SubExpression9 => (({Plus.left=current} "+" | {Minus.left=current} "-") right=SubExpression9)*;
	public SubExpression8Elements getSubExpression8Access() {
		return (pSubExpression8 != null) ? pSubExpression8 : (pSubExpression8 = new SubExpression8Elements());
	}
	
	public ParserRule getSubExpression8Rule() {
		return getSubExpression8Access().getRule();
	}

	//SubExpression9 returns ComplexExpression:
	//	SubExpression10 => (({Multiplication.left=current} "*" | {Division.left=current} "/") right=SubExpression10)*;
	public SubExpression9Elements getSubExpression9Access() {
		return (pSubExpression9 != null) ? pSubExpression9 : (pSubExpression9 = new SubExpression9Elements());
	}
	
	public ParserRule getSubExpression9Rule() {
		return getSubExpression9Access().getRule();
	}

	//SubExpression10 returns ComplexExpression:
	//	Expression => (({Excludes.left=current} "excludes" | {Requires.left=current} "requires") right=Expression)*;
	public SubExpression10Elements getSubExpression10Access() {
		return (pSubExpression10 != null) ? pSubExpression10 : (pSubExpression10 = new SubExpression10Elements());
	}
	
	public ParserRule getSubExpression10Rule() {
		return getSubExpression10Access().getRule();
	}

	//Expression:
	//	NumericExpression | BooleanExpression | BrackedExpression | StringExpression | SpecialExpression |
	//	PrimitiveExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SpecialExpression:
	//	op="clonesOf" expression=[Feature];
	public SpecialExpressionElements getSpecialExpressionAccess() {
		return (pSpecialExpression != null) ? pSpecialExpression : (pSpecialExpression = new SpecialExpressionElements());
	}
	
	public ParserRule getSpecialExpressionRule() {
		return getSpecialExpressionAccess().getRule();
	}

	//StringExpression:
	//	value=STRING;
	public StringExpressionElements getStringExpressionAccess() {
		return (pStringExpression != null) ? pStringExpression : (pStringExpression = new StringExpressionElements());
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}

	//PrimitiveExpression:
	//	featureID=[Feature] | head=AttHead refAtt=[Abstract_ATT_ID];
	public PrimitiveExpressionElements getPrimitiveExpressionAccess() {
		return (pPrimitiveExpression != null) ? pPrimitiveExpression : (pPrimitiveExpression = new PrimitiveExpressionElements());
	}
	
	public ParserRule getPrimitiveExpressionRule() {
		return getPrimitiveExpressionAccess().getRule();
	}

	//BooleanExpression:
	//	value="true" | value="false" | op="!" expression=BooleanExpression | op="or" "("
	//	expression_list=BooleanExpression_List ")" | op="xor" "(" expression_list=BooleanExpression_List ")" | op="and" "("
	//	expression_list=BooleanExpression_List ")";
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//BrackedExpression:
	//	"(" expression=SubExpression0 ")";
	public BrackedExpressionElements getBrackedExpressionAccess() {
		return (pBrackedExpression != null) ? pBrackedExpression : (pBrackedExpression = new BrackedExpressionElements());
	}
	
	public ParserRule getBrackedExpressionRule() {
		return getBrackedExpressionAccess().getRule();
	}

	//NumericExpression:
	//	value=Integer | value=Real | op="neg" expression=NumericExpression | op="abs" expression=NumericExpression | op="avg"
	//	"(" expression_list=NumericExpression_List ")" | op="max" "(" expression_list=NumericExpression_List ")" | op="min"
	//	"(" expression_list=NumericExpression_List ")" | op="mul" "(" expression_list=NumericExpression_List ")" | op="sum"
	//	"(" expression_list=NumericExpression_List ")";
	public NumericExpressionElements getNumericExpressionAccess() {
		return (pNumericExpression != null) ? pNumericExpression : (pNumericExpression = new NumericExpressionElements());
	}
	
	public ParserRule getNumericExpressionRule() {
		return getNumericExpressionAccess().getRule();
	}

	//NumericExpression_List:
	//	ex+=NumericExpression ("," ex+=NumericExpression)*;
	public NumericExpression_ListElements getNumericExpression_ListAccess() {
		return (pNumericExpression_List != null) ? pNumericExpression_List : (pNumericExpression_List = new NumericExpression_ListElements());
	}
	
	public ParserRule getNumericExpression_ListRule() {
		return getNumericExpression_ListAccess().getRule();
	}

	//BooleanExpression_List:
	//	ex+=BooleanExpression ("," ex+=BooleanExpression)*;
	public BooleanExpression_ListElements getBooleanExpression_ListAccess() {
		return (pBooleanExpression_List != null) ? pBooleanExpression_List : (pBooleanExpression_List = new BooleanExpression_ListElements());
	}
	
	public ParserRule getBooleanExpression_ListRule() {
		return getBooleanExpression_ListAccess().getRule();
	}

	/// **
	// * 5. OBJECTIVES CHAPTER
	// * / Objectives:
	//	"Objectives:" objectives+=Objective+;
	public ObjectivesElements getObjectivesAccess() {
		return (pObjectives != null) ? pObjectives : (pObjectives = new ObjectivesElements());
	}
	
	public ParserRule getObjectivesRule() {
		return getObjectivesAccess().getRule();
	}

	//Objective:
	//	"objective" name=ID "{" (op="max" "(" expression=ObjectiveExpression ")" | op="min" "(" expression=ObjectiveExpression
	//	")") //|   mao: 4/03/2014: other operators will be added if needed. The only examples that I have now uses Minimization or Maximization
	//	"}";
	public ObjectiveElements getObjectiveAccess() {
		return (pObjective != null) ? pObjective : (pObjective = new ObjectiveElements());
	}
	
	public ParserRule getObjectiveRule() {
		return getObjectiveAccess().getRule();
	}

	////|   mao: 4/03/2014: other operators will be added if needed. The only examples that I have used are Sum, e.g., sum *.cost, which means, to sum the cost of all the features
	//ObjectiveExpression:
	//	op="sum" "(" expression=PrimitiveExpression ")";
	public ObjectiveExpressionElements getObjectiveExpressionAccess() {
		return (pObjectiveExpression != null) ? pObjectiveExpression : (pObjectiveExpression = new ObjectiveExpressionElements());
	}
	
	public ParserRule getObjectiveExpressionRule() {
		return getObjectiveExpressionAccess().getRule();
	}

	/// **
	// * 6. CONFIGURATION CHAPTER
	// * / Configurations:
	//	"Configurations:" configurations+=Configuration+;
	public ConfigurationsElements getConfigurationsAccess() {
		return (pConfigurations != null) ? pConfigurations : (pConfigurations = new ConfigurationsElements());
	}
	
	public ParserRule getConfigurationsRule() {
		return getConfigurationsAccess().getRule();
	}

	//Configuration:
	//	"configuration" name=ID "{" (booleanValuation+=BooleanValuation //mao: 14/01/2013: this works well for boolean variability models
	//	| extendedValuation+= //mao: 14/01/2013: this works well for extended or cardinality-based feature models		 	
	//	ExtendedValuation)+ "}";
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//BooleanValuation:
	//	notSelected?="!"? feature= //it simplifies the way to write FEATURE.selected = true to only write the feature name		
	//	[Feature];
	public BooleanValuationElements getBooleanValuationAccess() {
		return (pBooleanValuation != null) ? pBooleanValuation : (pBooleanValuation = new BooleanValuationElements());
	}
	
	public ParserRule getBooleanValuationRule() {
		return getBooleanValuationAccess().getRule();
	}

	//ExtendedValuation:
	//	BasicAttrValuation | AdvancedAttrValuation;
	public ExtendedValuationElements getExtendedValuationAccess() {
		return (pExtendedValuation != null) ? pExtendedValuation : (pExtendedValuation = new ExtendedValuationElements());
	}
	
	public ParserRule getExtendedValuationRule() {
		return getExtendedValuationAccess().getRule();
	}

	//BasicAttrValuation:
	//	StringAttrValuation | BooleanAttrValuation | IntegerAttrValuation | RealAttrValuation;
	public BasicAttrValuationElements getBasicAttrValuationAccess() {
		return (pBasicAttrValuation != null) ? pBasicAttrValuation : (pBasicAttrValuation = new BasicAttrValuationElements());
	}
	
	public ParserRule getBasicAttrValuationRule() {
		return getBasicAttrValuationAccess().getRule();
	}

	////mao: I will create later a 'real expression' instead of just Real
	//RealAttrValuation:
	//	head=AttHead? refAtt=[Real_ATT_ID] "=" value=Real;
	public RealAttrValuationElements getRealAttrValuationAccess() {
		return (pRealAttrValuation != null) ? pRealAttrValuation : (pRealAttrValuation = new RealAttrValuationElements());
	}
	
	public ParserRule getRealAttrValuationRule() {
		return getRealAttrValuationAccess().getRule();
	}

	//IntegerAttrValuation:
	//	head=AttHead? refAtt=[Integer_ATT_ID] "=" value=Integer;
	public IntegerAttrValuationElements getIntegerAttrValuationAccess() {
		return (pIntegerAttrValuation != null) ? pIntegerAttrValuation : (pIntegerAttrValuation = new IntegerAttrValuationElements());
	}
	
	public ParserRule getIntegerAttrValuationRule() {
		return getIntegerAttrValuationAccess().getRule();
	}

	//BooleanAttrValuation:
	//	head=AttHead? refAtt=[Boolean_ATT_ID] "=" value=("true" | "false");
	public BooleanAttrValuationElements getBooleanAttrValuationAccess() {
		return (pBooleanAttrValuation != null) ? pBooleanAttrValuation : (pBooleanAttrValuation = new BooleanAttrValuationElements());
	}
	
	public ParserRule getBooleanAttrValuationRule() {
		return getBooleanAttrValuationAccess().getRule();
	}

	//StringAttrValuation:
	//	head=AttHead? refAtt=[String_ATT_ID] "=" value=STRING;
	public StringAttrValuationElements getStringAttrValuationAccess() {
		return (pStringAttrValuation != null) ? pStringAttrValuation : (pStringAttrValuation = new StringAttrValuationElements());
	}
	
	public ParserRule getStringAttrValuationRule() {
		return getStringAttrValuationAccess().getRule();
	}

	//AdvancedAttrValuation:
	//	attVsVal=TableBasedValuationByFeature | featVsVal+=TableBasedValuationByAttribute |
	//	attVsValForMultiFeature=TableBasedValuationByFeatureAndClone;
	public AdvancedAttrValuationElements getAdvancedAttrValuationAccess() {
		return (pAdvancedAttrValuation != null) ? pAdvancedAttrValuation : (pAdvancedAttrValuation = new AdvancedAttrValuationElements());
	}
	
	public ParserRule getAdvancedAttrValuationRule() {
		return getAdvancedAttrValuationAccess().getRule();
	}

	//TableBasedValuationByFeatureAndClone:
	//	("attribute-value pairs for clone feature:" refFeature=[Feature] "clone:" name=ID //long way
	//	//short way
	//	| refFeature=[Feature] "[" name=ID "]") "{" pairs+=PairAttributeValue ("," pairs+=PairAttributeValue)* "}";
	public TableBasedValuationByFeatureAndCloneElements getTableBasedValuationByFeatureAndCloneAccess() {
		return (pTableBasedValuationByFeatureAndClone != null) ? pTableBasedValuationByFeatureAndClone : (pTableBasedValuationByFeatureAndClone = new TableBasedValuationByFeatureAndCloneElements());
	}
	
	public ParserRule getTableBasedValuationByFeatureAndCloneRule() {
		return getTableBasedValuationByFeatureAndCloneAccess().getRule();
	}

	//TableBasedValuationByFeature:
	//	"attribute-value pairs for feature:"? refFeature=[Feature] "{" pairs+=PairAttributeValue (","
	//	pairs+=PairAttributeValue)* "}";
	public TableBasedValuationByFeatureElements getTableBasedValuationByFeatureAccess() {
		return (pTableBasedValuationByFeature != null) ? pTableBasedValuationByFeature : (pTableBasedValuationByFeature = new TableBasedValuationByFeatureElements());
	}
	
	public ParserRule getTableBasedValuationByFeatureRule() {
		return getTableBasedValuationByFeatureAccess().getRule();
	}

	//PairAttributeValue:
	//	refAtt=[Real_ATT_ID] "=" value=Real | refAtt=[Integer_ATT_ID] "=" value=Integer | refAtt=[Boolean_ATT_ID] "="
	//	value=("true" | "false") | refAtt=[String_ATT_ID] "=" value=STRING;
	public PairAttributeValueElements getPairAttributeValueAccess() {
		return (pPairAttributeValue != null) ? pPairAttributeValue : (pPairAttributeValue = new PairAttributeValueElements());
	}
	
	public ParserRule getPairAttributeValueRule() {
		return getPairAttributeValueAccess().getRule();
	}

	//TableBasedValuationByAttribute:
	//	"feature-value pairs for attribute:"? TableBasedValuationByAttributeForInteger |
	//	TableBasedValuationByAttributeForReal;
	public TableBasedValuationByAttributeElements getTableBasedValuationByAttributeAccess() {
		return (pTableBasedValuationByAttribute != null) ? pTableBasedValuationByAttribute : (pTableBasedValuationByAttribute = new TableBasedValuationByAttributeElements());
	}
	
	public ParserRule getTableBasedValuationByAttributeRule() {
		return getTableBasedValuationByAttributeAccess().getRule();
	}

	//TableBasedValuationByAttributeForInteger:
	//	refAtt=[Integer_ATT_ID] "{" pairs+=PairFeatureInteger ("," pairs+=PairFeatureInteger)* "}";
	public TableBasedValuationByAttributeForIntegerElements getTableBasedValuationByAttributeForIntegerAccess() {
		return (pTableBasedValuationByAttributeForInteger != null) ? pTableBasedValuationByAttributeForInteger : (pTableBasedValuationByAttributeForInteger = new TableBasedValuationByAttributeForIntegerElements());
	}
	
	public ParserRule getTableBasedValuationByAttributeForIntegerRule() {
		return getTableBasedValuationByAttributeForIntegerAccess().getRule();
	}

	//PairFeatureInteger:
	//	refFeat=[Feature] "-" value=Integer;
	public PairFeatureIntegerElements getPairFeatureIntegerAccess() {
		return (pPairFeatureInteger != null) ? pPairFeatureInteger : (pPairFeatureInteger = new PairFeatureIntegerElements());
	}
	
	public ParserRule getPairFeatureIntegerRule() {
		return getPairFeatureIntegerAccess().getRule();
	}

	//TableBasedValuationByAttributeForReal:
	//	refAtt=[Real_ATT_ID] "{" pairs+=PairFeatureReal ("," pairs+=PairFeatureReal)* "}";
	public TableBasedValuationByAttributeForRealElements getTableBasedValuationByAttributeForRealAccess() {
		return (pTableBasedValuationByAttributeForReal != null) ? pTableBasedValuationByAttributeForReal : (pTableBasedValuationByAttributeForReal = new TableBasedValuationByAttributeForRealElements());
	}
	
	public ParserRule getTableBasedValuationByAttributeForRealRule() {
		return getTableBasedValuationByAttributeForRealAccess().getRule();
	}

	//PairFeatureReal:
	//	refFeat=[Feature] "-" value=Real;
	public PairFeatureRealElements getPairFeatureRealAccess() {
		return (pPairFeatureReal != null) ? pPairFeatureReal : (pPairFeatureReal = new PairFeatureRealElements());
	}
	
	public ParserRule getPairFeatureRealRule() {
		return getPairFeatureRealAccess().getRule();
	}

	/// *
	// * 7. TERMINALS and IDS CHAPTER
	// * 
	// * / Real:
	//	Integer "." INT;
	public RealElements getRealAccess() {
		return (pReal != null) ? pReal : (pReal = new RealElements());
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Integer:
	//	"-"? INT;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	/// **
	//		 * mao 3/10/2013: The purpose of having att_id for each type of attribute is to guarantee type safety when writing expressions. 
	//		 * The other alternative was to allow any combinations of operands in the expressions and operations. However, it would require to create runtime verification.
	//		 * In other words, although the VM grammar seems a little bit verbose, it helps to guarantee type safety by construction and not by post-modeling type safety checking.    
	//		 * / Boolean_ATT_ID:
	//	head=AttHead name=ID;
	public Boolean_ATT_IDElements getBoolean_ATT_IDAccess() {
		return (pBoolean_ATT_ID != null) ? pBoolean_ATT_ID : (pBoolean_ATT_ID = new Boolean_ATT_IDElements());
	}
	
	public ParserRule getBoolean_ATT_IDRule() {
		return getBoolean_ATT_IDAccess().getRule();
	}

	//String_ATT_ID:
	//	head=AttHead name=ID;
	public String_ATT_IDElements getString_ATT_IDAccess() {
		return (pString_ATT_ID != null) ? pString_ATT_ID : (pString_ATT_ID = new String_ATT_IDElements());
	}
	
	public ParserRule getString_ATT_IDRule() {
		return getString_ATT_IDAccess().getRule();
	}

	//Integer_ATT_ID:
	//	head=AttHead name=ID;
	public Integer_ATT_IDElements getInteger_ATT_IDAccess() {
		return (pInteger_ATT_ID != null) ? pInteger_ATT_ID : (pInteger_ATT_ID = new Integer_ATT_IDElements());
	}
	
	public ParserRule getInteger_ATT_IDRule() {
		return getInteger_ATT_IDAccess().getRule();
	}

	//Real_ATT_ID:
	//	head=AttHead name=ID;
	public Real_ATT_IDElements getReal_ATT_IDAccess() {
		return (pReal_ATT_ID != null) ? pReal_ATT_ID : (pReal_ATT_ID = new Real_ATT_IDElements());
	}
	
	public ParserRule getReal_ATT_IDRule() {
		return getReal_ATT_IDAccess().getRule();
	}

	//Enum_String_ATT_ID:
	//	head=AttHead name=ID;
	public Enum_String_ATT_IDElements getEnum_String_ATT_IDAccess() {
		return (pEnum_String_ATT_ID != null) ? pEnum_String_ATT_ID : (pEnum_String_ATT_ID = new Enum_String_ATT_IDElements());
	}
	
	public ParserRule getEnum_String_ATT_IDRule() {
		return getEnum_String_ATT_IDAccess().getRule();
	}

	//Enum_Integer_ATT_ID:
	//	head=AttHead name=ID;
	public Enum_Integer_ATT_IDElements getEnum_Integer_ATT_IDAccess() {
		return (pEnum_Integer_ATT_ID != null) ? pEnum_Integer_ATT_ID : (pEnum_Integer_ATT_ID = new Enum_Integer_ATT_IDElements());
	}
	
	public ParserRule getEnum_Integer_ATT_IDRule() {
		return getEnum_Integer_ATT_IDAccess().getRule();
	}

	//Enum_Real_ATT_ID:
	//	head=AttHead name=ID;
	public Enum_Real_ATT_IDElements getEnum_Real_ATT_IDAccess() {
		return (pEnum_Real_ATT_ID != null) ? pEnum_Real_ATT_ID : (pEnum_Real_ATT_ID = new Enum_Real_ATT_IDElements());
	}
	
	public ParserRule getEnum_Real_ATT_IDRule() {
		return getEnum_Real_ATT_IDAccess().getRule();
	}

	//AttHead:
	//	forAllFeatures?="*." | ownedFeature=[Feature] ".";
	public AttHeadElements getAttHeadAccess() {
		return (pAttHead != null) ? pAttHead : (pAttHead = new AttHeadElements());
	}
	
	public ParserRule getAttHeadRule() {
		return getAttHeadAccess().getRule();
	}

	//Abstract_ATT_ID:
	//	Boolean_ATT_ID | String_ATT_ID | Integer_ATT_ID | Real_ATT_ID | Enum_String_ATT_ID | Enum_Integer_ATT_ID |
	//	Enum_Real_ATT_ID;
	public Abstract_ATT_IDElements getAbstract_ATT_IDAccess() {
		return (pAbstract_ATT_ID != null) ? pAbstract_ATT_ID : (pAbstract_ATT_ID = new Abstract_ATT_IDElements());
	}
	
	public ParserRule getAbstract_ATT_IDRule() {
		return getAbstract_ATT_IDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
